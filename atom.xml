<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>翼飞</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/gokoo/gokoo.github.io.git/"/>
  <updated>2020-03-23T12:42:26.006Z</updated>
  <id>https://github.com/gokoo/gokoo.github.io.git/</id>
  
  <author>
    <name>yifeeeee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于制定团队iOS代码规范以及Code Review的思考</title>
    <link href="https://github.com/gokoo/gokoo.github.io.git/2019/02/08/%E5%A6%82%E4%BD%95%E5%88%B6%E8%AE%A2%E4%B8%80%E5%A5%97%E9%80%82%E5%90%88%E8%87%AA%E5%B7%B1%E5%9B%A2%E9%98%9F%E7%9A%84iOS%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>https://github.com/gokoo/gokoo.github.io.git/2019/02/08/如何制订一套适合自己团队的iOS代码规范/</id>
    <published>2019-02-08T15:22:05.000Z</published>
    <updated>2020-03-23T12:42:26.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>如果团队成员的编码规范各不相同，那么你在接收其他人的代码时是不是总会因为无法认同他的代码风格，而想着去重写呢。但是重写这个事儿不只会增加梳理逻辑和开发成本，而且重写后出现问题的风险也会相应增加。那么，这个问题应该如何解决呢?</p><p>在我看来，如果出现这种情况，你的团队急需制定出一套适合自己团队的编码规范。有了统一的编码规范， 就能有效避免团队成员由于代码风格不一致而导致的相互认同感缺失问题。</p><p>那么，如何制定编码规范呢?在接下来的内容里，我会先说，我认为的好的编码规范。在制定编码规范时，也可以按照这个思路去细化出更多、更适合自己的规范，从而制定出团队的编码规范。然后如何通过Code Review的方式将制定的编码规范进行落地。</p><h1 id="好的代码规范"><a href="#好的代码规范" class="headerlink" title="好的代码规范"></a>好的代码规范</h1><p>关于好的代码规范，接下来我会从常量、变量、属性、条件语句、循环语句、函数、类，以及分类这8个方面一一说明。<br><a id="more"></a></p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>在常量的使用上，我建议你要尽量使用类型常量，而不是使用宏定义。比如，要定义一个字符串常量，可以写成:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> NSString * <span class="keyword">const</span> STMProjectName = @<span class="string">"GCDFetchFeed"</span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>对于变量来说，我认为好的编码习惯是:</p><ol><li>变量名应该可以明确体现出功能，最好再加上类型做后缀。这样也就明确了每个变量都是做什么的，而不是把一个变量当作不同的值用在不同的地方。</li><li>在使用之前，需要先对变量做初始化，并且初始化的地方离使用它的地方越近越好。 </li><li>不要滥用全局变量，尽量少用它来传递值，通过参数传值可以减少功能模块间的耦合。</li></ol><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>在iOS开发中，关于属性的编码规范，需要针对开发语言做区分:</p><ul><li>Objective-C 里的属性，要尽量通过 get 方法来进行懒加载，以避免无用的内存占用和多余的计算。 </li><li>Swift 的计算属性如果是只读，可以省掉 get 子句。</li></ul><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>在条件语句中，需要考虑到条件语句中可能涉及的所有分支条件，对于每个分支条件都需要考虑到，并进行处理，减少或不使用默认处理。特别是使用Switch处理枚举时，不要有default分支。</p><p>在iOS开发中，你使用 Swift 语言编写Switch语句时，如果不加default分支的话，当枚举有新增值时，编译器会提醒你增加分支处理。这样，就可以有效避免分支漏处理的情况。</p><p>另外，条件语句的嵌套分支不宜过多，可以充分利用 Swift中的guard语法。比如，这一段处理登录的示例代码:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> let userName = login.userNameOK &#123;</span><br><span class="line">    <span class="keyword">if</span> let password = login.passwordOK &#123;</span><br><span class="line">    <span class="comment">// 登录处理 ...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fatalError(<span class="string">"login wrong"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fatalError(<span class="string">"login wrong"</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面这段代码表示的是，当用户名和密码都没有问题时再进行登录处理。那么，我们使用guard语法时，可以改写如下:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">guard</span></span><br><span class="line">    <span class="keyword">let</span> userName = login.userNameOK, </span><br><span class="line">    <span class="keyword">let</span> password = login.passwordOK, </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">fatalError</span>(<span class="string">"login wrong"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 登录处理</span></span><br></pre></td></tr></table></figure></p><p>可以看到，改写后的代码更易读了，异常处理都在一个区域，guard 语句真正起到了守卫的职责。而且一旦声明了guard，编译器就会强制你去处理异常，否则就会报错。异常处理越完善，代码就会越健壮。所以，条件语句的嵌套处理，可以考虑使用guard语法。</p><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>在循环语句中，我们应该尽量少地使用continue和break，同样可以使用guard语法来解决这个问题。解决方法是:所有需要continue和break的地方统一使用guard去处理，将所有异常都放到一处。这样做的好处是，在维护的时候方便逻辑阅读，使得代码更加易读和易于理解。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>对于函数来说，体积不宜过大，最好控制在百行代码以内。如果函数内部逻辑多，我们可以将复杂逻辑分解成多个小逻辑，并将每个小逻辑提取出来作为一个单独的函数。每个函数处理最小单位的逻辑，然后一层一 层往上组合。<br>这样，我们就可以通过函数名明确那段逻辑处理的目的，提高代码的可读性。<br>拆分成多个逻辑简单的函数后，我们需要注意的是，要对函数的入参进行验证，guard 语法同样适用于检查入参。比如下面的这个函数:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">func <span class="title">saveRSS</span><span class="params">(rss: RSS?, store: Store?)</span> </span>&#123; </span><br><span class="line">    guard let rss = rss <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    guard let store = store <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">// 保存 RSS</span></span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外，函数内尽量避免使用全局变量来传递数据，使用参数或者局部变量传递数据能够减少函数对外部的依赖，减少耦合，提高函数的独立性，提高单元测试的准确性。</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>在Objective-C 中，类的头文件应该尽可能少地引入其他类的头文件。你可以通过 class 关键字来声明，然后在实现文件里引入需要的其他类的头文件。<br>对于继承和遵循协议的情况，无法避免引入其他类的头文件，所以你在代码设计时还是要尽量减少继承，特别是继承关系太多时不利于代码的维护和修改，比如说修改父类时还需要考虑对所有子类的影响，如果评估不全，影响就难以控制。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>在写分类时，分类里增加的方法名要尽量加上前缀，而如果是系统自带类的分类的话，方法名就一定要加上前缀，来避免方法名重复的问题。<br>分类的作用如其名，就是对类做分类用的，所以我建议，能够把一个类里的公共方法放到不同的分类里， 便于管理维护。分类特别适合多人负责同一个类时，根据不同分类来进行各自不同功能的代码维护。</p><h1 id="Code-review"><a href="#Code-review" class="headerlink" title="Code review"></a>Code review</h1><p>除此之外，你还可以参考其他公司对 iOS 开发制定的 编码规范来完善自己团队的编码规范，比如 <a href="https://github.com/spotify/ios-style">Spotify</a> 的 Objective-C 编码规范、<a href="https://github.com/NYTimes/objective-c-style-guide">纽约时报</a>的 Objective-C 的编 码规范、<a href="https://github.com/raywenderlich/objective-c-style-guide">Raywenderlich</a> 的 Objective-C 编码规范、<a href="https://github.com/raywenderlich/swift-style-guide">Raywenderlich</a> 的 Swift 编码规范。<br>在我看来，好的代码规范首先要保证代码逻辑清晰，然后再考虑简洁、扩展、重用等问题。逻辑清晰的代码 几乎不需要注释来说明，通过命名和清晰地编写逻辑就能够让其他人快速读懂。</p><p><strong>不需要注释就能轻松读懂的代码，使用的语言特性也必然是通用和经典的，过新的语言特性和黑魔法不利于代码逻辑的阅读，应该减少使用，即使使用也需要多加注释，避免他人无法理解。</strong></p><p>当你制定出好的代码规范后，就需要考虑如何将代码规范落地执行了。代码规范落地最好的方式就是 Code Review 。通过Code Review ，可以去检查代码规范是否被团队成员执行，同时还可以在Code Revie 时，及时指导代码编写不规范的同学。</p><h2 id="怎么做Code-Review会比较好呢"><a href="#怎么做Code-Review会比较好呢" class="headerlink" title="怎么做Code Review会比较好呢?"></a>怎么做Code Review会比较好呢?</h2><p>首先，我觉得要利用好 Code Review 这个卡点，先使用静态检查工具对提交的代码进行一次全面检查。</p><p>如果是 Swift 语言的话，你可以使用 <a href="https://github.com/realm/SwiftLint">SwiftLint</a>工具来检查代码规范。Swift 通过 Hook Clang 和 SourceKit 中 AST 的回调来检查源代码，如何使用SourceKit 开发工具可以参看这篇文章<a href="https://www.jpsim.com/uncovering-sourcekit/" target="_blank" rel="noopener">Uncovering SourceKit</a>。</p><p>SwiftLint 检查的默认规则，你可以参考它的规则说明。SwiftLint 也支持自定义检查规则，支持你添加自己 制定的代码规范。你可以在 SwiftLint 目录下添加一个 .swiftlint.yml 配置文件来自定义基于正则表达式的自 定义规则。具体方法，你可以参看官方定义<a href="https://github.com/realm/SwiftLint/blob/master/README_CN.md">自定义规则的说明</a>。</p><p>如果你是使用 Objective-C 语言开发的话，可以使用 OCLint 来做代码规范检查。关于 OCLint 如何定制自己的代码规范检查，你可以参看杨萧玉的这篇博文“<a href="http://yulingtianxia.com/blog/2019/01/27/MVVM-Rules-for-OCLint/" target="_blank" rel="noopener">使用 OCLint 自定义 MVVM 规则</a>”。</p><p>然后，进行<strong>人工检查</strong>。</p><p>人工检查，就是使用类似 Phabricator 这样的Code Review工具平台，来分配人员审核提交代码，审核完代码后，审核人可以进行通过、打回、评论等操作。这里需要注意的是，人工检查最容易沦为形式主义，因此为了避免团队成员人工检查成为形式，在开始阶段最好能让团队中编码习惯好、喜欢交流的人来做审核人， 以起到良好的示范作用，并以此作为后续的执行标准。</p><p>你可能会有疑问，既然工具可以检查代码规范，为什么还需要人工再检查一遍?我想说的是，工具确实可以 通过不断完善，甚至引入 AI 分析来提高检查结果的准确性，但是我认为 Code Review 之所以最终还是需要人工检查的原因是，<strong>通过团队成员之间互相检查代码的方式，希望能够达到相互沟通交流，甚至相互学习的效果</strong>。</p><p>试想一下，如果经过了大量的思考，花费了很多心思写出来一段自认为完美的代码，这时候可以再得到团队其他成员的鼓励，是不是会干劲儿十足呢。相反地，如果你马虎大意，或者经验不足而写出了不好的代码，通过 Code Review 而得到了团队其他成员的建议和指导，是不是能够让你的编码水平快速提高，同时还能够吸纳更多人的经验。</p><p>Code Review 的过程也能够对代码规范进行迭代改进，最后形成一份能体现出团队整体智慧的代码规范。以后再有新成员加入时，他们也能够快速达到团队整体的编码水平，这就好比一锅老汤，新食材放进来涮涮，很快就有了相同的味道。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;如果团队成员的编码规范各不相同，那么你在接收其他人的代码时是不是总会因为无法认同他的代码风格，而想着去重写呢。但是重写这个事儿不只会增加梳理逻辑和开发成本，而且重写后出现问题的风险也会相应增加。那么，这个问题应该如何解决呢?&lt;/p&gt;
&lt;p&gt;在我看来，如果出现这种情况，你的团队急需制定出一套适合自己团队的编码规范。有了统一的编码规范， 就能有效避免团队成员由于代码风格不一致而导致的相互认同感缺失问题。&lt;/p&gt;
&lt;p&gt;那么，如何制定编码规范呢?在接下来的内容里，我会先说，我认为的好的编码规范。在制定编码规范时，也可以按照这个思路去细化出更多、更适合自己的规范，从而制定出团队的编码规范。然后如何通过Code Review的方式将制定的编码规范进行落地。&lt;/p&gt;
&lt;h1 id=&quot;好的代码规范&quot;&gt;&lt;a href=&quot;#好的代码规范&quot; class=&quot;headerlink&quot; title=&quot;好的代码规范&quot;&gt;&lt;/a&gt;好的代码规范&lt;/h1&gt;&lt;p&gt;关于好的代码规范，接下来我会从常量、变量、属性、条件语句、循环语句、函数、类，以及分类这8个方面一一说明。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/gokoo/gokoo.github.io.git/categories/iOS/"/>
    
      <category term="思考" scheme="https://github.com/gokoo/gokoo.github.io.git/categories/iOS/%E6%80%9D%E8%80%83/"/>
    
    
      <category term="iOS" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/iOS/"/>
    
      <category term="思考" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/%E6%80%9D%E8%80%83/"/>
    
      <category term="代码规范" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>大项目，人员多，架构设计的思考</title>
    <link href="https://github.com/gokoo/gokoo.github.io.git/2019/02/04/%E5%A4%A7%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%BA%BA%E5%91%98%E5%A4%9A%EF%BC%8C%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>https://github.com/gokoo/gokoo.github.io.git/2019/02/04/大项目，人员多，架构设计的思考/</id>
    <published>2019-02-04T14:15:25.000Z</published>
    <updated>2020-03-23T00:18:57.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大项目、多人、多团队架构思考"><a href="#大项目、多人、多团队架构思考" class="headerlink" title="大项目、多人、多团队架构思考"></a>大项目、多人、多团队架构思考</h2><p><strong>粒度模块划</strong>分问题</p><p><strong>首先</strong>，项目规模变大之后，模块划分必须遵循一定的原则。如果模块划分不规范清晰，就很容易导致代码耦合严重的问题，进而加大重构的难度，主要表现在：</p><ul><li>业务需求不断，业务开发不能停。重新划分模块的工作量越大成本越高，重构以及技术改进的需求难度也就越大</li><li>老业务代码年久失修，没有注释，修改起来需要重新梳理的逻辑关系就会越冗长复杂，耗时长</li></ul><p><strong>所以</strong>需要搞清楚模块的<strong>粒度划分原则</strong>，定一个<strong>标准</strong>出来</p><p>针对iOS这种面向对象编程开发模式来说，应该遵循以下五个原则，即是<strong>SOLID原则</strong></p><ul><li><strong>单一功能原则</strong>：对象功能要单一，不要在一个对象添加很多的功能</li><li><strong>开闭原则</strong>：扩展是开放的，修改是封闭的</li><li><strong>里式替换原则</strong>：子类对象是可以代替基类对象的</li><li><strong>接口隔离原则</strong>：接口的用途要单一，不要在一个接口上根据不同的入参实现多个功能</li><li><strong>依赖翻转原则</strong>：方法依赖应该抽象，不要依赖实例。<a id="more"></a><strong>最后选择合适的粒度</strong>，大项目的模块粒度过大和过小都不合适</li></ul><p>其中，组件是可以组装的，独立的业务单元，具有高内聚低耦合的特性，是比较适中的粒度。iOS开发中的组件，不是单纯的UI控件，也不是一个Viewcontroller这种大UI功能的集合，一个粒度太小一个粒度又太大。<strong>iOS组件应该是包含UI控件、相关多个小功能的合集，是一种适中的粒度模块。</strong></p><h3 id="组件逻辑关系的梳理和改造"><a href="#组件逻辑关系的梳理和改造" class="headerlink" title="组件逻辑关系的梳理和改造"></a>组件逻辑关系的梳理和改造</h3><p>组件解耦不是说要求每个组件之间都没有耦合，组件之间也需要由上下层的依赖关系，组件的上下关系梳理清楚了就会更容易维护和管理，我一般都会分为不超过三个层级；</p><ul><li>底层可以是与业务无关的基础组件，比如网络和储存之类；</li><li>中间层组件一般是通用的业务组件，比如账号、埋点、支付等等；</li><li>最上层是迭代的业务组件，更新频率最高。</li></ul><p>这样设计的三层结构，有利于多个团队分别开发和维护，团队A和B，开发的时候有通用的功能，账号，埋点和主页等等，也有各自的业务功能模块，这样每一个功能都是一个组件。</p><p>如此新创建的团队C就能非常轻松地使用团队A和B开发的通用组件，团队之间新开发的组件也可以互相通用。</p><h3 id="多团队之间如何分工"><a href="#多团队之间如何分工" class="headerlink" title="多团队之间如何分工"></a>多团队之间如何分工</h3><p>代码层面上可以通过组件化解决大项目和多人，多团队架构的问题，但是架构问题还涉及到人员结构的架构，或者当公司的APP多了之后，相应的团队就多了，进而需要<strong>一个合理的团队结构</strong>：</p><ul><li>首先，需要专门的基建团队，负责业务无关的基础功能 组件和业务通用业务组件的开发；</li><li>然后每个业务都有一个专门的团队负责开发，业务可以按照耦合度来划分，耦合度最高的业务可以单独划分一个业务团队；</li><li>基建团队人员应该是流动的，否则个部分之间隔阂度太高，分工边界过于明显，会可能出现基建团队埋头苦干，做得过多，做得不够或是功能不好用的问题，造成严重的资源浪费，这也是工作中会遇到的问题。</li></ul><h3 id="我眼中的好架构"><a href="#我眼中的好架构" class="headerlink" title="我眼中的好架构"></a>我眼中的好架构</h3><p>组件化是解决项目大，人员多的一种很好的手段，在任何的公司和团队里都没有歧义。组件间的关系协调却没有固定的标准，协调的优劣，成为了衡量架构优劣的一个基本标准。所以再实践中，一般分成了<strong>协议式和中间者</strong>两种架构的设计方案。</p><p>协议式架构设计主要采用的是协议式编程的思路：在编译层面使用协议定义规范，实现在不同的地方从而实现达到分布式管理和维护组件的目的。这总方式也遵循了依赖翻转原则，是一种很好的面向对象变成的实践。</p><p><strong>但是缺点有二：</strong></p><ul><li>由于协式编程缺少统一调度层，导致难集中管理，特别是项目规模变大，团队变多的情况下，架构管控会显得越来越重要；</li><li>协议式编程接口的定义过于规范，从而使得架构灵活性能不高。当需要引入一个新的设计模式的时候会发现很难融入到现有的架构里面，缺乏架构的统一性。</li></ul><p>另一种常用的架构是中间者架构。它采用中间者统一管理的方式，进而控制APP的整个生命周期中间组件的调用关系。同时，iOS对于组件间扣得设计也需要保持一致性，方便中间者统一调用。</p><p>拆分的组件都会依赖中间者，组件之间不存在互相依赖关系，所以组件之间 的通讯更容易管理了，中间者也能够轻松添加新的设计模式，使得架构更加容易扩展。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;大项目、多人、多团队架构思考&quot;&gt;&lt;a href=&quot;#大项目、多人、多团队架构思考&quot; class=&quot;headerlink&quot; title=&quot;大项目、多人、多团队架构思考&quot;&gt;&lt;/a&gt;大项目、多人、多团队架构思考&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;粒度模块划&lt;/strong&gt;分问题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先&lt;/strong&gt;，项目规模变大之后，模块划分必须遵循一定的原则。如果模块划分不规范清晰，就很容易导致代码耦合严重的问题，进而加大重构的难度，主要表现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;业务需求不断，业务开发不能停。重新划分模块的工作量越大成本越高，重构以及技术改进的需求难度也就越大&lt;/li&gt;
&lt;li&gt;老业务代码年久失修，没有注释，修改起来需要重新梳理的逻辑关系就会越冗长复杂，耗时长&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;所以&lt;/strong&gt;需要搞清楚模块的&lt;strong&gt;粒度划分原则&lt;/strong&gt;，定一个&lt;strong&gt;标准&lt;/strong&gt;出来&lt;/p&gt;
&lt;p&gt;针对iOS这种面向对象编程开发模式来说，应该遵循以下五个原则，即是&lt;strong&gt;SOLID原则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单一功能原则&lt;/strong&gt;：对象功能要单一，不要在一个对象添加很多的功能&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开闭原则&lt;/strong&gt;：扩展是开放的，修改是封闭的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;里式替换原则&lt;/strong&gt;：子类对象是可以代替基类对象的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;接口隔离原则&lt;/strong&gt;：接口的用途要单一，不要在一个接口上根据不同的入参实现多个功能&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖翻转原则&lt;/strong&gt;：方法依赖应该抽象，不要依赖实例。
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/gokoo/gokoo.github.io.git/categories/iOS/"/>
    
      <category term="思考" scheme="https://github.com/gokoo/gokoo.github.io.git/categories/iOS/%E6%80%9D%E8%80%83/"/>
    
    
      <category term="iOS" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/iOS/"/>
    
      <category term="架构" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="思考" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>R语言下的pheatmap绘制热图</title>
    <link href="https://github.com/gokoo/gokoo.github.io.git/2018/06/06/pheatmap/"/>
    <id>https://github.com/gokoo/gokoo.github.io.git/2018/06/06/pheatmap/</id>
    <published>2018-06-06T10:15:25.000Z</published>
    <updated>2020-03-19T02:22:24.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac系统下R语言下利用pheatmap绘制热图的教程"><a href="#Mac系统下R语言下利用pheatmap绘制热图的教程" class="headerlink" title="Mac系统下R语言下利用pheatmap绘制热图的教程"></a>Mac系统下R语言下利用pheatmap绘制热图的教程</h1><p>heatmap在很多领域都有应用，当然绘制heatmap也有很多种方法，MATLAB，PS，Excel以及各种脚本语言，比如Python，JavaScript，R语言。</p><p>今天我就要说一说Mac开发环境下利用R语言的pheatmap，读取excel的数据，或者生成数据绘制heatmap。</p><p>首先来看看热图长什么样。<br><img src="/images/WX20180607-091902.png" alt=""></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="下载R语言的安装包"><a href="#下载R语言的安装包" class="headerlink" title="下载R语言的安装包"></a>下载R语言的安装包</h2><p><a href="https://www.r-project.org" target="_blank" rel="noopener">点击进入R语言下载界面</a></p><ul><li>点击download R。<a href="https://cran.r-project.org/mirrors.html" target="_blank" rel="noopener">download R</a></li><li>然后选择适合自己的CDN，在中国就选择清华的 <a href="https://mirrors.ustc.edu.cn/CRAN/" target="_blank" rel="noopener">清华CDN下载界面</a></li><li>选择适合你系统的R语言安装包。<a href="https://mirrors.ustc.edu.cn/CRAN/bin/linux/" target="_blank" rel="noopener">Linux</a>.<a href="https://mirrors.ustc.edu.cn/CRAN/bin/windows/" target="_blank" rel="noopener">Windows</a>.<a href="https://mirrors.ustc.edu.cn/CRAN/bin/macosx/" target="_blank" rel="noopener">Mac</a></li><li><strong>如果上面的看不懂就点击这里查看w3c的教程</strong><a href="https://www.w3cschool.cn/r/r_environment_setup.html" target="_blank" rel="noopener">w3c的教程</a><a id="more"></a><h2 id="分别安装成功之后运行R语言程序"><a href="#分别安装成功之后运行R语言程序" class="headerlink" title="分别安装成功之后运行R语言程序"></a>分别安装成功之后运行R语言程序</h2><img src="/images/WX20180607-092819.png" alt=""></li></ul><p><img src="/images/WX20180607-092920.png" alt=""></p><h3 id="第一步-配置工作目录"><a href="#第一步-配置工作目录" class="headerlink" title="第一步 配置工作目录"></a>第一步 配置工作目录</h3><p>使用getwd函数来显示当前工作目录，使用setwd函数改变当前目录:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; getwd()</span><br><span class="line">[<span class="number">1</span>] <span class="string">"/Users/zhangyifei"</span></span><br><span class="line">&gt; setwd(<span class="string">"~/Documents"</span>)</span><br><span class="line">&gt; getwd()</span><br><span class="line">[<span class="number">1</span>] <span class="string">"/Users/zhangyifei/Documents"</span></span><br></pre></td></tr></table></figure><p>成功把工作目录设置为 <em>~/Documents</em> 文件夹下</p><h3 id="第二步-加载需要的package-“pheatmap”"><a href="#第二步-加载需要的package-“pheatmap”" class="headerlink" title="第二步 加载需要的package “pheatmap”"></a>第二步 加载需要的package “pheatmap”</h3><ul><li><p>Mac下，按 command + Alt + i 进入package安装界面，或者 点击menuBar packages&amp;Data -&gt; Package Installer 进入<br><img src="/images/WX20180607-093546.png" alt=""></p></li><li><p>安装成功提示</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下载的二进制程序包在</span><br><span class="line">/var/folders/1j/r1v7hrln35b3c5srf63wbjl80000gn/<span class="literal">T</span>//Rtmpn6zgWr/downloaded_packages里</span><br></pre></td></tr></table></figure></li><li><p>尝试引入pheatmap，然后继续安装其他所需的package</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(pheatmap)</span><br><span class="line">错误: package or namespace load failed <span class="keyword">for</span> ‘pheatmap’ <span class="keyword">in</span> loadNamespace(i, c(lib.loc, .libPaths()), versionCheck = vI[[i]]):</span><br><span class="line"> 不存在叫‘gtable’这个名字的程辑包</span><br><span class="line">试开URL’https://mirrors.eliteu.cn/CRAN/bin/macosx/el-capitan/contrib/<span class="number">3.5</span>/gtable_0.2.0.tgz<span class="string">'</span></span><br><span class="line"><span class="string">Content type '</span>application/x-gzip<span class="string">' length 85683 bytes (83 KB)</span></span><br><span class="line"><span class="string">==================================================</span></span><br><span class="line"><span class="string">downloaded 83 KB</span></span><br></pre></td></tr></table></figure></li><li><p>提示 缺少 <strong>gtable</strong> 这个安装包，继续在package Installer 搜索并安装</p></li><li>继续使用 &gt; library(pheatmap) ，直到没有错误，完成pheatmap的安装。</li></ul><h3 id="初次使用pheatmap-pheatmap文档-百度文库"><a href="#初次使用pheatmap-pheatmap文档-百度文库" class="headerlink" title="初次使用pheatmap pheatmap文档-百度文库"></a>初次使用pheatmap <a href="https://wenku.baidu.com/view/aa1f3b45336c1eb91a375d71.html" target="_blank" rel="noopener">pheatmap文档-百度文库</a></h3><ul><li><p>首先运行一下代码，造出一些虚拟数据</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建数据集test测试矩阵  </span></span><br><span class="line">test = matrix(rnorm(<span class="number">200</span>), <span class="number">20</span>, <span class="number">10</span>)  </span><br><span class="line">test[<span class="number">1</span>:<span class="number">10</span>, seq(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)] = test[<span class="number">1</span>:<span class="number">10</span>, seq(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)] + <span class="number">3</span>  </span><br><span class="line">test[<span class="number">11</span>:<span class="number">20</span>, seq(<span class="number">2</span>, <span class="number">10</span>, <span class="number">2</span>)] = test[<span class="number">11</span>:<span class="number">20</span>, seq(<span class="number">2</span>, <span class="number">10</span>, <span class="number">2</span>)] + <span class="number">2</span>  </span><br><span class="line">test[<span class="number">15</span>:<span class="number">20</span>, seq(<span class="number">2</span>, <span class="number">10</span>, <span class="number">2</span>)] = test[<span class="number">15</span>:<span class="number">20</span>, seq(<span class="number">2</span>, <span class="number">10</span>, <span class="number">2</span>)] + <span class="number">4</span>  </span><br><span class="line">colnames(test) = paste(<span class="string">"Test"</span>, <span class="number">1</span>:<span class="number">10</span>, sep = <span class="string">""</span>)  </span><br><span class="line">rownames(test) = paste(<span class="string">"Gene"</span>, <span class="number">1</span>:<span class="number">20</span>, sep = <span class="string">""</span>)</span><br><span class="line"><span class="comment"># print查看虚拟数据的表格</span></span><br><span class="line">&gt; print(test)</span><br><span class="line">             Test1      Test2       Test3       Test4       Test5       Test6       Test7      Test8      Test9     Test10</span><br><span class="line">Gene1   <span class="number">4.16565797</span> -<span class="number">0.5332217</span>  <span class="number">2.75177432</span>  <span class="number">0.09050091</span>  <span class="number">2.92299796</span> -<span class="number">0.03065525</span>  <span class="number">3.25369007</span>  <span class="number">1.6498609</span>  <span class="number">5.5140122</span> -<span class="number">0.6128477</span></span><br><span class="line">Gene2   <span class="number">2.92359811</span>  <span class="number">0.8752739</span>  <span class="number">3.66345374</span> -<span class="number">1.50312709</span>  <span class="number">4.18093373</span> -<span class="number">0.98068132</span>  <span class="number">2.45325663</span> -<span class="number">0.2559521</span>  <span class="number">2.6452355</span>  <span class="number">0.9482075</span></span><br><span class="line">Gene3   <span class="number">2.57691541</span>  <span class="number">0.5655297</span>  <span class="number">3.67327715</span> -<span class="number">1.16676176</span>  <span class="number">2.86796233</span>  <span class="number">0.84392770</span>  <span class="number">1.58980797</span> -<span class="number">0.4452452</span>  <span class="number">4.5591699</span> -<span class="number">0.3777792</span></span><br><span class="line">Gene4   <span class="number">2.20998817</span> -<span class="number">0.6476140</span>  <span class="number">1.82619478</span>  <span class="number">0.20842503</span>  <span class="number">5.61892487</span>  <span class="number">2.72355157</span>  <span class="number">2.62418152</span> -<span class="number">1.4968677</span>  <span class="number">0.6739014</span> -<span class="number">0.5288066</span></span><br><span class="line">Gene5   <span class="number">2.38652479</span>  <span class="number">0.9312714</span>  <span class="number">2.54595175</span>  <span class="number">1.14883361</span>  <span class="number">3.20331623</span> -<span class="number">0.09334568</span>  <span class="number">3.07390285</span>  <span class="number">0.3063662</span>  <span class="number">3.1054117</span>  <span class="number">1.2705683</span></span><br><span class="line">Gene6   <span class="number">2.39478774</span> -<span class="number">1.1261661</span>  <span class="number">3.03025086</span>  <span class="number">1.01563976</span>  <span class="number">2.52318186</span>  <span class="number">0.84812055</span>  <span class="number">3.27005713</span> -<span class="number">0.8367966</span>  <span class="number">1.4205975</span> -<span class="number">0.1367932</span></span><br><span class="line">Gene7   <span class="number">2.62131968</span>  <span class="number">0.6992899</span>  <span class="number">2.25204510</span>  <span class="number">1.34989987</span>  <span class="number">2.97693639</span>  <span class="number">0.30943294</span>  <span class="number">3.27633509</span>  <span class="number">0.1267961</span>  <span class="number">2.2810863</span> -<span class="number">1.2900047</span></span><br><span class="line">Gene8   <span class="number">3.58112235</span>  <span class="number">0.4807381</span>  <span class="number">1.62681774</span> -<span class="number">0.33562825</span>  <span class="number">4.40921772</span> -<span class="number">0.48509264</span>  <span class="number">2.03981473</span> -<span class="number">1.2606898</span>  <span class="number">3.6922420</span> -<span class="number">0.6446854</span></span><br><span class="line">Gene9   <span class="number">0.99267891</span> -<span class="number">1.2629488</span>  <span class="number">2.06609587</span> -<span class="number">0.21681098</span>  <span class="number">1.96182398</span> -<span class="number">1.41969859</span>  <span class="number">3.31023690</span>  <span class="number">0.2180971</span>  <span class="number">2.9437715</span> -<span class="number">0.3806902</span></span><br><span class="line">Gene10  <span class="number">4.12715661</span> -<span class="number">0.2136322</span>  <span class="number">4.62205045</span> -<span class="number">2.32553157</span>  <span class="number">3.64262245</span>  <span class="number">0.02360678</span>  <span class="number">2.00265816</span>  <span class="number">0.4206732</span>  <span class="number">3.1467020</span>  <span class="number">2.1769087</span></span><br><span class="line">Gene11 -<span class="number">0.09215522</span>  <span class="number">1.1265504</span>  <span class="number">1.38731747</span>  <span class="number">1.85485547</span>  <span class="number">0.99736984</span>  <span class="number">1.34063368</span>  <span class="number">0.28087822</span>  <span class="number">1.0977324</span> -<span class="number">1.0247692</span>  <span class="number">2.8091086</span></span><br><span class="line">Gene12  <span class="number">0.18625357</span>  <span class="number">4.7773888</span> -<span class="number">0.08486060</span>  <span class="number">2.58186479</span> -<span class="number">0.78182003</span>  <span class="number">1.90266287</span>  <span class="number">1.00209123</span>  <span class="number">1.4110036</span>  <span class="number">0.1093483</span>  <span class="number">1.3953864</span></span><br><span class="line">Gene13 -<span class="number">1.16239850</span>  <span class="number">1.3965048</span>  <span class="number">0.09446052</span>  <span class="number">0.87578260</span> -<span class="number">1.26780043</span>  <span class="number">2.82916652</span> -<span class="number">0.05420670</span>  <span class="number">0.5785381</span>  <span class="number">0.7610233</span>  <span class="number">1.2991690</span></span><br><span class="line">Gene14  <span class="number">0.43790594</span>  <span class="number">2.0389307</span>  <span class="number">1.25732857</span>  <span class="number">3.32854010</span> -<span class="number">0.33689596</span>  <span class="number">2.32263273</span>  <span class="number">1.68448694</span>  <span class="number">0.1837919</span>  <span class="number">0.1148969</span>  <span class="number">1.5774761</span></span><br><span class="line">Gene15 -<span class="number">0.78805795</span>  <span class="number">5.6452089</span>  <span class="number">1.16313071</span>  <span class="number">6.54379640</span> -<span class="number">0.22959185</span>  <span class="number">5.15790036</span> -<span class="number">1.34789990</span>  <span class="number">5.8514132</span> -<span class="number">0.9923669</span>  <span class="number">5.2847863</span></span><br><span class="line">Gene16  <span class="number">2.08792577</span>  <span class="number">5.4574904</span>  <span class="number">0.56437760</span>  <span class="number">5.37730138</span> -<span class="number">0.68379768</span>  <span class="number">4.66291839</span>  <span class="number">0.52126695</span>  <span class="number">6.1721846</span>  <span class="number">0.5563628</span>  <span class="number">7.0962682</span></span><br><span class="line">Gene17  <span class="number">0.05124655</span>  <span class="number">6.3967121</span>  <span class="number">1.01852622</span>  <span class="number">5.82298443</span> -<span class="number">0.81731000</span>  <span class="number">6.35169540</span>  <span class="number">0.01920213</span>  <span class="number">6.0312737</span> -<span class="number">0.7635853</span>  <span class="number">6.6401004</span></span><br><span class="line">Gene18 -<span class="number">0.31987851</span>  <span class="number">6.7682519</span> -<span class="number">0.80230549</span>  <span class="number">4.38410875</span>  <span class="number">0.03526136</span>  <span class="number">7.48838461</span>  <span class="number">1.57151778</span>  <span class="number">6.5473611</span> -<span class="number">2.5019644</span>  <span class="number">4.7268250</span></span><br><span class="line">Gene19  <span class="number">0.68443755</span>  <span class="number">6.3221438</span>  <span class="number">0.55006319</span>  <span class="number">5.22758579</span>  <span class="number">0.11115899</span>  <span class="number">6.58952720</span> -<span class="number">1.62195280</span>  <span class="number">6.4833998</span> -<span class="number">0.5872461</span>  <span class="number">5.5101095</span></span><br><span class="line">Gene20  <span class="number">0.96231309</span>  <span class="number">5.4082046</span>  <span class="number">0.39004366</span>  <span class="number">4.86237392</span>  <span class="number">0.65172133</span>  <span class="number">5.90754631</span>  <span class="number">1.10989981</span>  <span class="number">4.5998277</span> -<span class="number">0.3509650</span>  <span class="number">5.4079388</span></span><br></pre></td></tr></table></figure></li><li><p>执行&gt;pheatmap(test),绘制以test为数据的热图</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pheatmap(test)</span><br></pre></td></tr></table></figure></li><li><p>以上就能生成文章开始的标准热图了</p></li></ul><h3 id="读取excel的数据，并绘制热图"><a href="#读取excel的数据，并绘制热图" class="headerlink" title="读取excel的数据，并绘制热图"></a>读取excel的数据，并绘制热图</h3><ul><li>安装 <strong>readxl</strong> </li><li><p>读取工作目录下data.xlsx文件 命名为 data</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; data &lt;- read_excel(<span class="string">"data.xlsx"</span>)</span><br></pre></td></tr></table></figure></li><li><p>调用pheatmap，绘制标准热图</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pheatmap(data)</span><br></pre></td></tr></table></figure></li><li><p>如果出现一下错误是因为图表绘制的有问题</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Error <span class="keyword">in</span> hclust(d, method = method) : </span><br><span class="line">  外接函数调用时不能有<span class="literal">NA</span>/<span class="literal">NaN</span>/<span class="literal">Inf</span>(arg11)</span><br><span class="line">此外: Warning messages:</span><br><span class="line"><span class="number">1</span>: In dist(mat, method = distance) : 强制改变过程中产生了<span class="literal">NA</span></span><br><span class="line"><span class="number">2</span>: In dist(mat, method = distance) : 强制改变过程中产生了<span class="literal">NA</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="pheatmap的参数以及功能"><a href="#pheatmap的参数以及功能" class="headerlink" title="pheatmap的参数以及功能"></a>pheatmap的参数以及功能</h3><table><thead><tr><th>参数名</th><th>值</th><th>作用</th></tr></thead><tbody><tr><td>cellwidth</td><td>16</td><td>方格宽度</td></tr><tr><td>cellheight</td><td>16</td><td>方格高度</td></tr><tr><td>fontsize</td><td>9</td><td>文字大小</td></tr><tr><td>color</td><td></td><td>方格的颜色</td></tr><tr><td>cluster_rows</td><td>TRUE/FALSE</td><td>是否显示行的关系树</td></tr><tr><td>cluster_cols</td><td>TRUE/FALSE</td><td>是否显示列的关系树</td></tr><tr><td>legend</td><td>TRUE/FALSE</td><td>是否显示图例</td></tr></tbody></table><p>示例代码<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pheatmap(test, cellwidth=<span class="number">16</span>, cellheight=<span class="number">16</span>, fontsize= <span class="number">9</span> ,  color= colorRampPalette(c(<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"orange"</span>))(<span class="number">50</span>), cluster_rows=<span class="literal">FALSE</span>,cluster_cols=<span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure></p><p>生成以下热图<br><img src="/images/WX20180607-100326.png" alt=""></p><p>参考资料</p><ul><li><a href="http://www.shengxin.ren/article/107" target="_blank" rel="noopener">那些年画过的热图之pheatmap美化过程</a></li><li><a href="https://blog.csdn.net/qazplm12_3/article/details/74516312" target="_blank" rel="noopener">R绘制热图</a></li><li><a href="http://www.itkeyword.com/doc/5292364481458865620/pheatmap-error-error-in-hclustd-method-method-na-nan-inf-in-foreign-funct" target="_blank" rel="noopener">解决r - Pheatmap error Error in hclust(d, method = method) : NA/NaN/Inf in foreign function call (arg 11)</a></li><li><a href="https://blog.csdn.net/sinat_38163598/article/details/72770404" target="_blank" rel="noopener">R语言绘制热图——pheatmap</a></li><li><a href="https://www.w3cschool.cn/r/r_basic_syntax.html" target="_blank" rel="noopener">R语言教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mac系统下R语言下利用pheatmap绘制热图的教程&quot;&gt;&lt;a href=&quot;#Mac系统下R语言下利用pheatmap绘制热图的教程&quot; class=&quot;headerlink&quot; title=&quot;Mac系统下R语言下利用pheatmap绘制热图的教程&quot;&gt;&lt;/a&gt;Mac系统下R语言下利用pheatmap绘制热图的教程&lt;/h1&gt;&lt;p&gt;heatmap在很多领域都有应用，当然绘制heatmap也有很多种方法，MATLAB，PS，Excel以及各种脚本语言，比如Python，JavaScript，R语言。&lt;/p&gt;
&lt;p&gt;今天我就要说一说Mac开发环境下利用R语言的pheatmap，读取excel的数据，或者生成数据绘制heatmap。&lt;/p&gt;
&lt;p&gt;首先来看看热图长什么样。&lt;br&gt;&lt;img src=&quot;/images/WX20180607-091902.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;h2 id=&quot;下载R语言的安装包&quot;&gt;&lt;a href=&quot;#下载R语言的安装包&quot; class=&quot;headerlink&quot; title=&quot;下载R语言的安装包&quot;&gt;&lt;/a&gt;下载R语言的安装包&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.r-project.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击进入R语言下载界面&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点击download R。&lt;a href=&quot;https://cran.r-project.org/mirrors.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;download R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;然后选择适合自己的CDN，在中国就选择清华的 &lt;a href=&quot;https://mirrors.ustc.edu.cn/CRAN/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;清华CDN下载界面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;选择适合你系统的R语言安装包。&lt;a href=&quot;https://mirrors.ustc.edu.cn/CRAN/bin/linux/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Linux&lt;/a&gt;.&lt;a href=&quot;https://mirrors.ustc.edu.cn/CRAN/bin/windows/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Windows&lt;/a&gt;.&lt;a href=&quot;https://mirrors.ustc.edu.cn/CRAN/bin/macosx/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果上面的看不懂就点击这里查看w3c的教程&lt;/strong&gt;&lt;a href=&quot;https://www.w3cschool.cn/r/r_environment_setup.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;w3c的教程&lt;/a&gt;
    
    </summary>
    
      <category term="R" scheme="https://github.com/gokoo/gokoo.github.io.git/categories/R/"/>
    
    
      <category term="R" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/R/"/>
    
      <category term="heatmap" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/heatmap/"/>
    
  </entry>
  
  <entry>
    <title>push anything</title>
    <link href="https://github.com/gokoo/gokoo.github.io.git/2018/06/04/showAnyThing/"/>
    <id>https://github.com/gokoo/gokoo.github.io.git/2018/06/04/showAnyThing/</id>
    <published>2018-06-04T02:15:25.000Z</published>
    <updated>2020-03-19T03:31:48.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备写一个能随时显示另一个页面的工具"><a href="#准备写一个能随时显示另一个页面的工具" class="headerlink" title="准备写一个能随时显示另一个页面的工具"></a>准备写一个能随时显示另一个页面的工具</h1><p>首先是想写点什么，然后就想到了解耦相关，就突然冒出一个想法</p><p>能不能在任意界面push另一个界面呢？字典传参，再写一个push的方法</p><p>最终目的就是在一个界面执行如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[YFPushViewID:@<span class="string">"mainView"</span> params:@&#123;<span class="string">"id"</span>:@<span class="string">"12"</span> , @<span class="string">"title"</span>:@<span class="string">"Main"</span>&#125;];</span><br></pre></td></tr></table></figure></p><p>就能显示另一个界面了</p><p>永远拿到最上面的控制器，然后显示一个界面</p><p>我觉得还是有实用价值的</p><p>其实这个想法就是想路由方法，通过URL的方式来传值</p><p>开始做一下试试</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;准备写一个能随时显示另一个页面的工具&quot;&gt;&lt;a href=&quot;#准备写一个能随时显示另一个页面的工具&quot; class=&quot;headerlink&quot; title=&quot;准备写一个能随时显示另一个页面的工具&quot;&gt;&lt;/a&gt;准备写一个能随时显示另一个页面的工具&lt;/h1&gt;&lt;p&gt;首先是想写点
      
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/gokoo/gokoo.github.io.git/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/iOS/"/>
    
      <category term="想法儿" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/%E6%83%B3%E6%B3%95%E5%84%BF/"/>
    
  </entry>
  
  <entry>
    <title>Aho-Corasick automaton trash Word tools</title>
    <link href="https://github.com/gokoo/gokoo.github.io.git/2018/05/28/Aho-Corasick%20automaton%20trash%20Word%20tools/"/>
    <id>https://github.com/gokoo/gokoo.github.io.git/2018/05/28/Aho-Corasick automaton trash Word tools/</id>
    <published>2018-05-28T08:40:25.000Z</published>
    <updated>2020-03-17T13:16:05.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于trie树的AC自动机实现脏字过滤"><a href="#基于trie树的AC自动机实现脏字过滤" class="headerlink" title="基于trie树的AC自动机实现脏字过滤"></a>基于trie树的AC自动机实现脏字过滤</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>之前有一个用户发言的功能，然后需要进行敏感词的筛选，因为实时弹幕的量比较大，放到服务端来做数据太多处理起来耗时，所以决定在客户端来做一下。</p><h2 id="什么是Trie-wikipedia"><a href="#什么是Trie-wikipedia" class="headerlink" title="什么是Trie wikipedia"></a>什么是Trie <a href="https://zh.wikipedia.org/wiki/Trie" target="_blank" rel="noopener">wikipedia</a></h2><p>trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。</p><p>trie树常用于搜索提示。如当输入一个网址，可以自动搜索出可能的选择。当没有完全匹配的搜索结果，可以返回前缀最相似的可能。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/be/Trie_example.svg/250px-Trie_example.svg.png" alt=""></p><h2 id="什么是AC自动机算法-wikipedia"><a href="#什么是AC自动机算法-wikipedia" class="headerlink" title="什么是AC自动机算法 wikipedia"></a>什么是AC自动机算法 <a href="https://zh.wikipedia.org/wiki/AC自动机算法" target="_blank" rel="noopener">wikipedia</a></h2><p>在计算机科学中，Aho–Corasick算法是由Alfred V. Aho和Margaret J.Corasick 发明的字符串搜索算法，用于在输入的一串字符串中匹配<em>有限组“字典”中的子串</em>。它与普通字符串匹配的不同点在于同时与所有字典串进行匹配。算法均摊情况下具有近似于线性的时间复杂度，约为字符串的长度加所有匹配的数量。然而由于需要找到所有匹配数，如果每个子串互相匹配（如字典为a，aa，aaa，aaaa，输入的字符串为aaaa），算法的时间复杂度会近似于匹配的二次函数。<br>该算法主要依靠构造一个有限状态机（类似于在一个trie树中添加失配指针）来实现。这些额外的失配指针允许在查找字符串失败时进行回退（例如设Trie树的单词cat匹配失败，但是在Trie树中存在另一个单词cart，失配指针就会指向前缀ca），转向某前缀的其他分支，免于重复匹配前缀，提高算法效率。<br><a id="more"></a></p><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>设一个字典中有如下单词：{a,ab,bab,bc,bca,c,caa}.<br>下方的图是用AC自动机算法由该词典构造而成的一棵Trie树，其中每个节点都有一条从根节点到它的唯一路径，代表一个单词。<br>在这种数据结构中，字符串的每一个前缀都有一个节点来表示（详见Trie）。所以如果（bca）在字典中，则会存在（bca），（bc），（b）和（）对应的节点。如果该节点表示的字符串在字典中存在，则该节点为一个蓝色节点，否则为一个灰色节点。<br>树中的黑色有向边代表起点是终点的“父亲”（即起点对应字符串增加一个字符可得终点对应字符串），例如从（bc）有一条指向（bca）的黑色有向边。<br>树中的蓝色有向边（后缀节点）代表终点对应字符串是起点对应字符串的最大严格后缀。例如对于一个节点（caa），它的严格后缀为（aa），（a）和（），其中在图中且最长的为（a），所以（caa）有一条指向（a）的蓝色有向边。一个节点的蓝色有向边可以在线性时间内通过重复遍历节点父亲节点的蓝色有向边直到横移节点（the traversing node）有一个属于目标节点前缀的孩子。<br>树中的绿色有向边（字典后缀节点）代表终点是起点经过蓝色有向边到达的第一个蓝色节点（即字典中存在终点对应字符串）。例如（bca）有一条绿色边连向（a），因为（a）是（bca）通过蓝色有向边到达的第一个蓝色节点，路径为（bca）→（ca）→（a）。绿色有向边也可以在线性时间内通过遍历蓝色有向边直到找到一个蓝色节点，并用记忆化的方法计算。</p><hr><p>字典 {a, ab, bab, bc, bca, c, caa}</p><table><thead><tr><th>节点</th><th>是否在字典中</th><th>后缀节点(蓝色有向边)</th><th>字典后缀节点(绿色有向边)</th></tr></thead><tbody><tr><td>()</td><td>-</td><td></td><td></td></tr><tr><td>(a)</td><td>+</td><td>()</td></tr><tr><td>(ab)</td><td>+</td><td>(b)</td></tr><tr><td>(b)</td><td>–</td><td>()</td></tr><tr><td>(ba)</td><td>–</td><td>(a)</td><td>(a)</td></tr><tr><td>(bab)</td><td>+</td><td>(ab)</td><td>(ab)</td></tr><tr><td>(bc)</td><td>+</td><td>(c)</td><td>(c)</td></tr><tr><td>(bca)</td><td>+</td><td>(ca)</td><td>(a)</td></tr><tr><td>(c)</td><td>+</td><td>()</td></tr><tr><td>(ca)</td><td>–</td><td>(a)</td><td>(a)</td></tr><tr><td>(caa)</td><td>+</td><td>(a)</td><td>(a)</td></tr></tbody></table><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/62/Ahocorasick.svg/220px-Ahocorasick.svg.png" alt=""> 图例</p><p>在每一步中，算法先查找当前节点的“孩子节点”，如果没有找到匹配，查找它的后缀节点(suffix)的孩子，如果仍然没有，接着查找后缀节点的后缀节点的孩子, 如此循环, 直到根结点，如果到达根节点仍没有找到匹配则结束。<br>当算法查找到一个节点，则输出所有结束在当前位置的字典项。输出步骤为首先找到该节点的字典后缀，然后用递归的方式一直执行到节点没有字典前缀为止。同时，如果该节点为一个字典节点，则输出该节点本身。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>首先拿到屏蔽词词库，是一个txt文档，想办法把词库包装成为自己需要的显示格式，因为是开发iOS版本的，所以第一就想到的是plist文件。所以包含以下几步</p><ul><li>1、拿到txt，读出字符串</li><li>2、正则出去不相关的符号，分隔成一个一个的词组</li><li>3、把词组包装成有序trie树的结构</li><li>4、本地保存trie树结构</li><li>5、实现判断用户输入词组的检索方法</li><li>6、词库的更新</li></ul><h3 id="第一、二步实现的方法很多，简单的字符串操作以及文件读取操作"><a href="#第一、二步实现的方法很多，简单的字符串操作以及文件读取操作" class="headerlink" title="第一、二步实现的方法很多，简单的字符串操作以及文件读取操作"></a>第一、二步实现的方法很多，简单的字符串操作以及文件读取操作</h3><h3 id="第三步-单步操作"><a href="#第三步-单步操作" class="headerlink" title="第三步 单步操作"></a>第三步 单步操作</h3><p>这里为了方面后面的判断，每一个词组插入之后会在尾端加一个end的flag，表示这个单词索引是否结束<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加单个String词到被操作的字典里</span></span><br><span class="line">-(<span class="keyword">void</span>)insertStringTo:(NSMutableDictionary *)Dic withString:(NSString *)<span class="built_in">string</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//取出字符</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.length) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    NSString *singleStr = [<span class="built_in">string</span> substringWithRange:NSMakeRange(<span class="number">0</span>, <span class="number">1</span>)];</span><br><span class="line">    <span class="comment">//判断当前字典是不是包含这个key</span></span><br><span class="line">    <span class="keyword">if</span> ([Dic.allKeys containsObject:singleStr]) &#123;</span><br><span class="line">        NSMutableDictionary *operationDic = Dic[singleStr];</span><br><span class="line">        [self insertStringTo:operationDic withString:[<span class="built_in">string</span> substringFromIndex:<span class="number">1</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        NSMutableDictionary *newDic = [NSMutableDictionary dictionary];</span><br><span class="line">        <span class="comment">//如果当前敏感词检索到最后一位，为当前的字典加一个end标识符</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.length == <span class="number">1</span>) &#123;</span><br><span class="line">            [newDic setObject:[NSNumber numberWithBool:YES] forKey:@<span class="string">"isEnd"</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            [self insertStringTo:newDic withString:[<span class="built_in">string</span> substringFromIndex:<span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        [Dic setObject:newDic forKey:singleStr];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="第四步-本地储存"><a href="#第四步-本地储存" class="headerlink" title="第四步 本地储存"></a>第四步 本地储存</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把词库以及版本的字典包装好，写入到文件里</span></span><br><span class="line">-(<span class="keyword">void</span>)updateTrieplistWithDic:(NSMutableDictionary *)dataDic withVerisionString:(NSString *)verisionString;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//最后要进行读写操作的字典</span></span><br><span class="line">    NSMutableDictionary *finalDic = [NSMutableDictionary dictionary];</span><br><span class="line">    <span class="comment">//获取plist文件的路径</span></span><br><span class="line">    NSString *path=[[NSBundle mainBundle]pathForResource:@<span class="string">"Trie"</span> ofType:@<span class="string">"plist"</span>];</span><br><span class="line">    <span class="comment">//添加版本字段</span></span><br><span class="line">    <span class="keyword">if</span> (verisionString) &#123;</span><br><span class="line">        [finalDic setValue:verisionString forKey:@<span class="string">"verision"</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        [finalDic setValue:self.verision forKey:@<span class="string">"verision"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    [finalDic setValue:dataDic forKey:@<span class="string">"trieDic"</span>];</span><br><span class="line">    <span class="comment">//最后完整的字典写到plist文件里</span></span><br><span class="line">    [finalDic  writeToFile:path atomically:YES];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第五步-实现判断用户输入词组的检索方法"><a href="#第五步-实现判断用户输入词组的检索方法" class="headerlink" title="第五步 实现判断用户输入词组的检索方法"></a>第五步 实现判断用户输入词组的检索方法</h3><ul><li>首先除去用户的噪音数据，比如说“*（……&amp;%￥#”这样的符号，以及空格(正则方法)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  去除用户输入的噪音数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param noMutestring   需要匹配的字符串(非可变类型)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @return 取出之后的结果字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (NSString *)ResultString:(NSString *)noMutestring;</span><br><span class="line">&#123;</span><br><span class="line">    NSMutableString *<span class="built_in">string</span> = [NSMutableString stringWithFormat:@<span class="string">"%@"</span>,noMutestring];</span><br><span class="line">    NSString *regexStr = @<span class="string">"[/\\s+/g~`:@#$%^&amp;\\【】：、》《“.！。￥*……·()_\\+&#123;&#125;\\|&lt;&gt;\\/\\\[\\]]"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//生成正则匹配方法</span></span><br><span class="line">    NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:regexStr options:NSRegularExpressionCaseInsensitive error:nil];</span><br><span class="line">    <span class="comment">//根据正则获取可变字符串的匹配结果数组(NSTextCheckingResult *)</span></span><br><span class="line">    NSArray * matches = [regex matchesInString:<span class="built_in">string</span> options:<span class="number">0</span> range:NSMakeRange(<span class="number">0</span>, [<span class="built_in">string</span> length])];</span><br><span class="line">    <span class="comment">//遍历string 根据匹配结果删除噪音数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matches.count; i ++) &#123;</span><br><span class="line">        <span class="comment">//获取匹配结果</span></span><br><span class="line">        NSTextCheckingResult *checkResult = matches[i];</span><br><span class="line">        <span class="comment">//获取range</span></span><br><span class="line">        NSRange tempRange = checkResult.range;</span><br><span class="line">        <span class="comment">//利用可变数组按照range删除的方法删除噪音数据</span></span><br><span class="line">        [<span class="built_in">string</span> deleteCharactersInRange:NSMakeRange(tempRange.location - i, tempRange.length)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回结果字符</span></span><br><span class="line">    <span class="keyword">return</span> [NSString stringWithString:<span class="built_in">string</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后把干净的字符串与包装好的trie树进行对比<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//①.附属方法-&gt;仅仅判断是否包含敏感词的方法</span></span><br><span class="line">-(BOOL)checkDic:(NSDictionary *)Dic IsTrashWordsInString:(NSString *)InputString</span><br><span class="line">&#123;</span><br><span class="line">    NSString *noNoiseWordsString = [self ResultString:InputString];</span><br><span class="line">    <span class="keyword">if</span> (noNoiseWordsString.length == <span class="number">0</span>) &#123; <span class="comment">//输入!号时崩溃！！！！！</span></span><br><span class="line">        self.isResult = NO;</span><br><span class="line">        <span class="keyword">return</span> self.isResult;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSRange range = NSMakeRange(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (InputString.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        NSString *beignCharacter = [noNoiseWordsString substringWithRange:range];</span><br><span class="line">        <span class="comment">//说明检索到了</span></span><br><span class="line">        <span class="keyword">if</span> ([Dic.allKeys containsObject:beignCharacter]) &#123;</span><br><span class="line">            <span class="comment">//拿字典</span></span><br><span class="line">            NSDictionary *resutDic = Dic[beignCharacter];</span><br><span class="line">            <span class="comment">//如果检索到完成标识符，返回YES</span></span><br><span class="line">            <span class="keyword">if</span> ([resutDic.allKeys containsObject:@<span class="string">"isEnd"</span>]) &#123;</span><br><span class="line">                self.isResult = YES;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//否则取出字典，截取字符串之后继续判断</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                [self checkDic:resutDic IsTrashWordsInString:[noNoiseWordsString substringFromIndex:<span class="number">1</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则从头开始截取字符串之后继续判断</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            _originString = [_originString substringFromIndex:<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (_originString.length == <span class="number">0</span>) &#123; <span class="comment">//输入减号崩溃！！！</span></span><br><span class="line">                <span class="keyword">return</span> NO;</span><br><span class="line">            &#125;</span><br><span class="line">            [self checkDic:self.trieDictionary IsTrashWordsInString:[_originString substringFromIndex:<span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//默认返回NO(没判断当然不知道包含不包含||检索完毕没有一个YES就是不包含)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> self.isResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="词库的更新"><a href="#词库的更新" class="headerlink" title="词库的更新"></a>词库的更新</h3><p>更新的实现，在本地化之前在里面写上词库版本号，后端分离一个接口用于检查版本和新词库的添加<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)checkAndUpdate</span><br><span class="line">&#123;</span><br><span class="line">    NSDictionary *params = @&#123;@<span class="string">"mask_version"</span>:self.verision&#125;;</span><br><span class="line">    </span><br><span class="line">    [HRRequest requestAppServer:URL_Check_mask_Verision</span><br><span class="line">                        parameter:params</span><br><span class="line">                          success:^(NSDictionary *dic) &#123;</span><br><span class="line">                              <span class="keyword">if</span> ([dic.allKeys containsObject:@<span class="string">"new_mask_word"</span>]) &#123;</span><br><span class="line">                                  NSArray *newMaskWordsArr = dic[@<span class="string">"new_mask_word"</span>];</span><br><span class="line">                                      <span class="comment">//不管怎么样都把返回数组进行遍历然后添加到trie字典然后写入文件</span></span><br><span class="line">                                  <span class="keyword">for</span> (NSString *temp in newMaskWordsArr) &#123;</span><br><span class="line">                                      <span class="comment">//对字典进行操作，添加新的词</span></span><br><span class="line">                                      [self insertStringTo:self.resultDic withString:temp];</span><br><span class="line">                                  &#125;</span><br><span class="line">                                  <span class="comment">//forin循环完毕，写入到plist文件并且把服务器获取到的版本号进行赋值更新</span></span><br><span class="line">                                  <span class="keyword">if</span> ([dic.allKeys containsObject:@<span class="string">"new_version"</span>]) &#123;</span><br><span class="line">                                      NSString *newVerision = dic[@<span class="string">"new_version"</span>];</span><br><span class="line">                                      <span class="keyword">if</span> ([newVerision integerValue] != <span class="number">0</span>) &#123;</span><br><span class="line">                                          [self updateTrieplistWithDic:self.resultDic withVerisionString:newVerision];</span><br><span class="line">                                          <span class="comment">//替换缓存内的词库</span></span><br><span class="line">                                          self.trieDictionary = self.resultDic;</span><br><span class="line">                                          <span class="comment">//替换版本</span></span><br><span class="line">                                          self.verision = newVerision;</span><br><span class="line">                                      &#125;</span><br><span class="line">                                  &#125;</span><br><span class="line">                              &#125;</span><br><span class="line">                          &#125; failure:^(NSError *error) &#123;</span><br><span class="line">                              NSLog(@<span class="string">"%@"</span>,error.userInfo);</span><br><span class="line">                              </span><br><span class="line">                          &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参考来源</p><ul><li>Black, Paul E. trie. Dictionary of Algorithms and Data Structures. 国家标准技术研究所. 2009-11-16. </li><li>2.0 2.1 Franklin Mark Liang. Word Hy-phen-a-tion By Com-put-er (PDF) (Doctor of Philosophy论文). Stanford University. 1983 [2010-03-28]. （原始内容 (PDF)存档于2010-05-19）.</li><li>Knuth, Donald. 6.3: Digital Searching. The Art of Computer Programming Volume 3: Sorting and Searching 2nd. Addison-Wesley. 1997: 492. ISBN 0-201-89685-0.</li><li>An Implementation of Double-Array Trie</li><li>Aho, Alfred V.; Corasick, Margaret J. Efficient string matching: An aid to bibliographic search. Communications of the ACM. June 1975, 18 (6): 333–340. MR 0371172. doi:10.1145/360825.360855.</li><li>敏感词过滤算法之Aho-Corasick算法 <a href="https://www.cnblogs.com/zyguo/p/4705270.html" target="_blank" rel="noopener">https://www.cnblogs.com/zyguo/p/4705270.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基于trie树的AC自动机实现脏字过滤&quot;&gt;&lt;a href=&quot;#基于trie树的AC自动机实现脏字过滤&quot; class=&quot;headerlink&quot; title=&quot;基于trie树的AC自动机实现脏字过滤&quot;&gt;&lt;/a&gt;基于trie树的AC自动机实现脏字过滤&lt;/h1&gt;&lt;h2 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; title=&quot;需求分析&quot;&gt;&lt;/a&gt;需求分析&lt;/h2&gt;&lt;p&gt;之前有一个用户发言的功能，然后需要进行敏感词的筛选，因为实时弹幕的量比较大，放到服务端来做数据太多处理起来耗时，所以决定在客户端来做一下。&lt;/p&gt;
&lt;h2 id=&quot;什么是Trie-wikipedia&quot;&gt;&lt;a href=&quot;#什么是Trie-wikipedia&quot; class=&quot;headerlink&quot; title=&quot;什么是Trie wikipedia&quot;&gt;&lt;/a&gt;什么是Trie &lt;a href=&quot;https://zh.wikipedia.org/wiki/Trie&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wikipedia&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。&lt;/p&gt;
&lt;p&gt;trie树常用于搜索提示。如当输入一个网址，可以自动搜索出可能的选择。当没有完全匹配的搜索结果，可以返回前缀最相似的可能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/b/be/Trie_example.svg/250px-Trie_example.svg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是AC自动机算法-wikipedia&quot;&gt;&lt;a href=&quot;#什么是AC自动机算法-wikipedia&quot; class=&quot;headerlink&quot; title=&quot;什么是AC自动机算法 wikipedia&quot;&gt;&lt;/a&gt;什么是AC自动机算法 &lt;a href=&quot;https://zh.wikipedia.org/wiki/AC自动机算法&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wikipedia&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在计算机科学中，Aho–Corasick算法是由Alfred V. Aho和Margaret J.Corasick 发明的字符串搜索算法，用于在输入的一串字符串中匹配&lt;em&gt;有限组“字典”中的子串&lt;/em&gt;。它与普通字符串匹配的不同点在于同时与所有字典串进行匹配。算法均摊情况下具有近似于线性的时间复杂度，约为字符串的长度加所有匹配的数量。然而由于需要找到所有匹配数，如果每个子串互相匹配（如字典为a，aa，aaa，aaaa，输入的字符串为aaaa），算法的时间复杂度会近似于匹配的二次函数。&lt;br&gt;该算法主要依靠构造一个有限状态机（类似于在一个trie树中添加失配指针）来实现。这些额外的失配指针允许在查找字符串失败时进行回退（例如设Trie树的单词cat匹配失败，但是在Trie树中存在另一个单词cart，失配指针就会指向前缀ca），转向某前缀的其他分支，免于重复匹配前缀，提高算法效率。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/gokoo/gokoo.github.io.git/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/iOS/"/>
    
      <category term="算法" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>52 Special Ways to Improve Your iOS Programs 读书笔记</title>
    <link href="https://github.com/gokoo/gokoo.github.io.git/2018/05/28/effective-oc_reading_notes/"/>
    <id>https://github.com/gokoo/gokoo.github.io.git/2018/05/28/effective-oc_reading_notes/</id>
    <published>2018-05-28T02:00:25.000Z</published>
    <updated>2020-03-19T03:29:24.239Z</updated>
    
    <content type="html"><![CDATA[<p>本文只整理了对自己觉得有帮助的知识点</p><h1 id="第一章-熟悉Objective-C"><a href="#第一章-熟悉Objective-C" class="headerlink" title="第一章 熟悉Objective-C"></a>第一章 熟悉Objective-C</h1><h3 id="了解OC的起源"><a href="#了解OC的起源" class="headerlink" title="了解OC的起源"></a>了解OC的起源</h3><ul><li>OC使用“消息结构”是有Smalltalk演化而来</li><li>OC与函数调用的语言区别是“OC运行时代码由环境决定，函数语言由编译器决定”</li></ul><h3 id="多用类型常量，少用-define预处理指令"><a href="#多用类型常量，少用-define预处理指令" class="headerlink" title="多用类型常量，少用#define预处理指令"></a>多用类型常量，少用#define预处理指令</h3><ul><li>#define没有指定变量类型，最好使用static const [变量类型] [变量名] [变量值]</li><li>如果定义的常量要在全局使用在前面加extern并且命名的时候要遵循规则，防止命名冲突</li></ul><h3 id="枚举表示状态、选项、状态码"><a href="#枚举表示状态、选项、状态码" class="headerlink" title="枚举表示状态、选项、状态码"></a>枚举表示状态、选项、状态码</h3><ul><li>枚举加switch表示不同状态，最好不要实现default方法，防止新加的switch分支漏掉实现方法</li></ul><h1 id="第二章-对象、消息、runtime"><a href="#第二章-对象、消息、runtime" class="headerlink" title="第二章 对象、消息、runtime"></a>第二章 对象、消息、runtime</h1><a id="more"></a><h3 id="理解”属性这一概念“"><a href="#理解”属性这一概念“" class="headerlink" title="理解”属性这一概念“"></a>理解”属性这一概念“</h3><ul><li>@property默认生成 setter和getter一对存取方法</li><li>ABI(Application Binary Interface)：应用程序二进制接口</li><li>@dynamic关键字告诉编译器不生成存取方法</li><li>atomic/nonatomic 原子性/非原子性 多线程共同操作一个属性会造成取值不准确，但是iOS不用atomic，因为会造成严重的性能问题，并且没法保证安全，在iOS平台会用”锁“来处理。但是MACOSX可以，没有性能瓶颈。</li><li>assign 用于纯量类型，简单的赋值操作</li><li>strong 表适拥有关系</li><li>weak 表示非拥有关系，当指定的对象dealloc的时候，属性值会被清空</li><li>unsafa_unretained  和assign相同，适用于object，对象dealloc的时候不会被清空，和weak有区别</li><li>copy set方法不存新值，get方法取一份copy的值</li><li><p>getter=&lt;”name”&gt; 指定get方法名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, getter=isOn) BOOL on;</span><br></pre></td></tr></table></figure></li><li><p>setter=&lt;”name”&gt; 指定set方法名（不常见）</p></li></ul><h3 id="在对象内部尽量直接访问实例变量"><a href="#在对象内部尽量直接访问实例变量" class="headerlink" title="在对象内部尽量直接访问实例变量"></a>在对象内部尽量直接访问实例变量</h3><ul><li>直接访问实例变量比较快，但是不会触发KVO和懒加载（lazy loading）<h3 id="理解”对象等同性“（判断两个对象是不是相同的）"><a href="#理解”对象等同性“（判断两个对象是不是相同的）" class="headerlink" title="理解”对象等同性“（判断两个对象是不是相同的）"></a>理解”对象等同性“（判断两个对象是不是相同的）</h3></li><li>isEqual 判断两个对象指针是不是在一块内存地址，是指同一个”人“</li><li>hash 哈希值是判断两个对象是不是一样的东西，是指”两个一样的人，比方双胞胎“</li><li><p>实现自己的equal方法思路</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首先判断是不是一个class</span><br><span class="line">判断主键</span><br><span class="line">分条判断属性是否一样(判断的深度按需求决定)</span><br></pre></td></tr></table></figure></li><li><p>hash的时候应当使用计算比较快而且碰撞率比较低的算法</p></li></ul><h3 id="在既有类使用关联对象存放自定义数据（runtime）"><a href="#在既有类使用关联对象存放自定义数据（runtime）" class="headerlink" title="在既有类使用关联对象存放自定义数据（runtime）"></a>在既有类使用关联对象存放自定义数据（runtime）</h3><table><thead><tr><th>关联类型</th><th>等效的@property属性</th></tr></thead><tbody><tr><td>OBJC_ASSOCIATION_ASSIGN</td><td>assign</td></tr><tr><td>OBJC_ASSOCIATION_RETAIN_NONATOMIC</td><td>noatomic,retain</td></tr><tr><td>OBJC_ASSOCIATION_COPY_NONATOMIC</td><td>noatomic,copy</td></tr><tr><td>OBJC_ASSOCIATION_RETAIN</td><td>retain</td></tr><tr><td>OBJC_ASSOCIATION_COPY</td><td>copy</td></tr></tbody></table><p><em>常用方法</em><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//管理关联对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_setAssoicatedObject</span><span class="params">(id object,<span class="keyword">void</span> *key. id value. object_AssociationPolicy policy)</span></span></span><br><span class="line"><span class="function"><span class="comment">//以给定的键和策略为某对象设置值</span></span></span><br><span class="line"><span class="function">id <span class="title">objc_getAssociatedObject</span><span class="params">(id object, <span class="keyword">void</span> *key)</span></span></span><br><span class="line"><span class="function"><span class="comment">//依据给定的键从某对象中获取相应的关联值</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_AssociatedObjects</span><span class="params">(id object)</span></span></span><br></pre></td></tr></table></figure></p><ul><li>非必要情况下少使用，因为不好排查bug<h3 id="理解objc-msgSend作用"><a href="#理解objc-msgSend作用" class="headerlink" title="理解objc_msgSend作用"></a>理解objc_msgSend作用</h3></li><li><p>给对象发送消息的函数，实际上是一个参数可变的函数，可以接受两个或者两个以上的参数，第一个代表消息的接收者，第二个参数代表方法，之后就是消息中的那些参数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给对象发消息</span></span><br><span class="line"><span class="function">id <span class="title">objc_msgSend</span><span class="params">(id self, SEL cmd, ...)</span></span></span><br><span class="line"><span class="function"><span class="comment">//编译器转化之后的函数表示为</span></span></span><br><span class="line"><span class="function">id  returnValue </span>= objc_msgSend(someObject, @slector(messageName:), parameter);</span><br></pre></td></tr></table></figure></li><li><p>objc_msgSend会在接受者的“方法列表(list of methods)”里面搜寻已注册的方法，如果没找到就<em>沿着继承体系向上查找</em>，如果最终还找不到就执行”*消息转发message forwarding”</p></li></ul><h3 id="理解消息转发机制"><a href="#理解消息转发机制" class="headerlink" title="理解消息转发机制"></a>理解消息转发机制</h3><ul><li>unrecognized selector sent to instance 是向对象发送了一个没法解析的方法，启动了消息转发的机制，并将消息转发给了NSObject的默认实现。</li><li>上面的异常是NSObject 的“doesNotRecognizeSelector”方法抛出的</li></ul><p>当obj接收了一个没有实现的方法</p><ul><li>首先是 + (BOOL)resolveInstanceMethod:(SEL)Selector（配合dynamic实现setter和getter）,如果这个方法没有处理，那么转到 - (id)forwardingTargetForSelector:(SEL)selector (备援接收者) 搜寻是否有预处理别的obj来实现此方法，如果没有则转到，- (void)forwardInvocation:(NSInvocatron:)invocation</li><li>这三步都有机会来处理方法，步骤越往后，处理的代价越大，最好在第一步就能处理完</li></ul><h3 id="用“方法调配技术”调试“黑盒方法”（method-swizzing）"><a href="#用“方法调配技术”调试“黑盒方法”（method-swizzing）" class="headerlink" title="用“方法调配技术”调试“黑盒方法”（method_swizzing）"></a>用“方法调配技术”调试“黑盒方法”（method_swizzing）</h3><ul><li><p>method_swizzing 是交换方法实现的指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//交换方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method_exchangeImplementations</span><span class="params">(Method m1, Method m2)</span></span></span><br><span class="line"><span class="function"><span class="comment">//取selector方法</span></span></span><br><span class="line"><span class="function">Method <span class="title">class_getInstanceMethod</span><span class="params">(Class aClass, SEL Selector)</span></span></span><br></pre></td></tr></table></figure></li><li><p>可以用于调试，增加日志log，但是不建议滥用</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文只整理了对自己觉得有帮助的知识点&lt;/p&gt;
&lt;h1 id=&quot;第一章-熟悉Objective-C&quot;&gt;&lt;a href=&quot;#第一章-熟悉Objective-C&quot; class=&quot;headerlink&quot; title=&quot;第一章 熟悉Objective-C&quot;&gt;&lt;/a&gt;第一章 熟悉Objective-C&lt;/h1&gt;&lt;h3 id=&quot;了解OC的起源&quot;&gt;&lt;a href=&quot;#了解OC的起源&quot; class=&quot;headerlink&quot; title=&quot;了解OC的起源&quot;&gt;&lt;/a&gt;了解OC的起源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;OC使用“消息结构”是有Smalltalk演化而来&lt;/li&gt;
&lt;li&gt;OC与函数调用的语言区别是“OC运行时代码由环境决定，函数语言由编译器决定”&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;多用类型常量，少用-define预处理指令&quot;&gt;&lt;a href=&quot;#多用类型常量，少用-define预处理指令&quot; class=&quot;headerlink&quot; title=&quot;多用类型常量，少用#define预处理指令&quot;&gt;&lt;/a&gt;多用类型常量，少用#define预处理指令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;#define没有指定变量类型，最好使用static const [变量类型] [变量名] [变量值]&lt;/li&gt;
&lt;li&gt;如果定义的常量要在全局使用在前面加extern并且命名的时候要遵循规则，防止命名冲突&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;枚举表示状态、选项、状态码&quot;&gt;&lt;a href=&quot;#枚举表示状态、选项、状态码&quot; class=&quot;headerlink&quot; title=&quot;枚举表示状态、选项、状态码&quot;&gt;&lt;/a&gt;枚举表示状态、选项、状态码&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;枚举加switch表示不同状态，最好不要实现default方法，防止新加的switch分支漏掉实现方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;第二章-对象、消息、runtime&quot;&gt;&lt;a href=&quot;#第二章-对象、消息、runtime&quot; class=&quot;headerlink&quot; title=&quot;第二章 对象、消息、runtime&quot;&gt;&lt;/a&gt;第二章 对象、消息、runtime&lt;/h1&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/gokoo/gokoo.github.io.git/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/iOS/"/>
    
      <category term="读书笔记" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Docker 学习笔记（上）</title>
    <link href="https://github.com/gokoo/gokoo.github.io.git/2018/05/09/dockerlearn/"/>
    <id>https://github.com/gokoo/gokoo.github.io.git/2018/05/09/dockerlearn/</id>
    <published>2018-05-09T14:46:25.000Z</published>
    <updated>2020-03-17T13:16:05.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-学习笔记"><a href="#Docker-学习笔记" class="headerlink" title="Docker 学习笔记"></a>Docker 学习笔记</h1><hr><h2 id="为什么要用Docker"><a href="#为什么要用Docker" class="headerlink" title="为什么要用Docker"></a>为什么要用Docker</h2><h3 id="环境配置的难题"><a href="#环境配置的难题" class="headerlink" title="环境配置的难题"></a>环境配置的难题</h3><hr><p>软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。如果某些老旧的模块与当前环境不兼容，那就麻烦了。环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。</p><h3 id="虚拟机-解决办法"><a href="#虚拟机-解决办法" class="headerlink" title="虚拟机 解决办法"></a>虚拟机 解决办法</h3><hr><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，不需要了就删掉，对电脑本身环境没有影响，但是有以下缺点。</p><ul><li>资源占用多</li><li>麻烦</li><li>启动慢</li><li>过于重<a id="more"></a><h3 id="Linux容器"><a href="#Linux容器" class="headerlink" title="Linux容器"></a>Linux容器</h3></li></ul><hr><p>由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。<br>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p><p>由于容器是进程级别的，相比虚拟机有很多优势。</p><ul><li>启动快</li><li>资源小</li><li>体积小</li></ul><h3 id="Docker-是什么？"><a href="#Docker-是什么？" class="headerlink" title="Docker 是什么？"></a>Docker 是什么？</h3><hr><p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。<br>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。</p><h3 id="Docker-的用途"><a href="#Docker-的用途" class="headerlink" title="Docker 的用途"></a>Docker 的用途</h3><hr><p>Docker 的主要用途，目前有三大类。</p><ul><li>提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。</li><li>提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。</li><li>组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</li></ul><h3 id="Docker-的安装"><a href="#Docker-的安装" class="headerlink" title="Docker 的安装"></a>Docker 的安装</h3><hr><p>Docker CE 的安装请参考官方文档。</p><ul><li><a href="https://docs.docker.com/docker-for-mac/install/" target="_blank" rel="noopener">Mac</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Ubuntu</a></li><li><a href="https://docs.docker.com/docker-for-windows/install/" target="_blank" rel="noopener">Windows</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/debian/" target="_blank" rel="noopener">Debian</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">CentOS</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/fedora/" target="_blank" rel="noopener">Fedora</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/binaries/" target="_blank" rel="noopener">其他 Linux 发行版</a></li></ul><p>安装完成后，运行下面的命令，验证是否安装成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker version</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ docker info</span><br></pre></td></tr></table></figure><p>Docker 需要用户具有 sudo 权限，为了避免每次命令都输入sudo，可以把用户加入 Docker 用户组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><p>Docker 是服务器—-客户端架构。命令行运行docker命令的时候，需要本机有 Docker 服务。如果这项服务没有启动，可以用下面的命令启动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service 命令的用法</span></span><br><span class="line">$ sudo service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># systemctl 命令的用法</span></span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><hr><hr><h2 id="image-文件-镜像"><a href="#image-文件-镜像" class="headerlink" title="image 文件 (镜像)"></a>image 文件 (镜像)</h2><hr><p>Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p><p>image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出本机的所有 image 文件。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker image ls</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除 image 文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker image rm [imageName]</span></span><br></pre></td></tr></table></figure></p><p>image 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用<br>（待续）</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-学习笔记&quot;&gt;&lt;a href=&quot;#Docker-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Docker 学习笔记&quot;&gt;&lt;/a&gt;Docker 学习笔记&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;为什么要用Docker&quot;&gt;&lt;a href=&quot;#为什么要用Docker&quot; class=&quot;headerlink&quot; title=&quot;为什么要用Docker&quot;&gt;&lt;/a&gt;为什么要用Docker&lt;/h2&gt;&lt;h3 id=&quot;环境配置的难题&quot;&gt;&lt;a href=&quot;#环境配置的难题&quot; class=&quot;headerlink&quot; title=&quot;环境配置的难题&quot;&gt;&lt;/a&gt;环境配置的难题&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。如果某些老旧的模块与当前环境不兼容，那就麻烦了。环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。&lt;/p&gt;
&lt;h3 id=&quot;虚拟机-解决办法&quot;&gt;&lt;a href=&quot;#虚拟机-解决办法&quot; class=&quot;headerlink&quot; title=&quot;虚拟机 解决办法&quot;&gt;&lt;/a&gt;虚拟机 解决办法&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，不需要了就删掉，对电脑本身环境没有影响，但是有以下缺点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;资源占用多&lt;/li&gt;
&lt;li&gt;麻烦&lt;/li&gt;
&lt;li&gt;启动慢&lt;/li&gt;
&lt;li&gt;过于重
    
    </summary>
    
      <category term="全栈" scheme="https://github.com/gokoo/gokoo.github.io.git/categories/%E5%85%A8%E6%A0%88/"/>
    
    
      <category term="运维" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="全栈" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/%E5%85%A8%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>比特币白皮书学习笔记</title>
    <link href="https://github.com/gokoo/gokoo.github.io.git/2018/05/01/bit/"/>
    <id>https://github.com/gokoo/gokoo.github.io.git/2018/05/01/bit/</id>
    <published>2018-05-01T14:46:25.000Z</published>
    <updated>2020-03-19T03:30:07.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><strong>地址</strong> </p><p>比特币地址（例如：1DSrfJdB2AnWaFNgSbv3MZC2m74996JafV）由一串字符和数字组成，以阿拉伯数字“1”开头。就像别人向你的email地址发送电子邮件一样，他可以通过你的比特币地址向你发送比特币。</p><p><strong>BIP</strong></p><p>比特币改进提议 （Bitcoin Improvement Proposals 的缩写），指比特币社区成员所提交的一系列改进比特币的提议。例如，BIP0021是一项改进比特币统一资源标识符（URI）计划的提议。</p><p><strong>比特币</strong></p><p>“比特币”既可以指这种虚拟货币单位，也指比特币网络或者网络节点使用的比特币软件。<br><a id="more"></a><br><strong>区块</strong></p><p>一个区块就是若干交易数据的集合，它会被标记上时间戳和之前一个区块的独特标记。区块头经过哈希运算后会生成一份工作量证明，从而验证区块中的交易。有效的区块经过全网络的共识后会被追加到主区块链中。</p><p><strong>区块链</strong></p><p>区块链是一串通过验证的区块，当中的每一个区块都与上一个相连，一直连到创世区块。</p><p><strong>确认</strong></p><p>当一项交易被区块收录时，我们可以说它有一次确认。矿工们在此区块之后每再产生一个区块，此项交易的确认数就再加一。当确认数达到六及以上时，通常认为这笔交易比较安全并难以逆转。</p><p><strong>难度</strong></p><p>整个网络会通过调整“难度”这个变量来控制生成工作量证明所需要的计算力。</p><p><strong>难度目标</strong></p><p>使整个网络的计算力大致每10分钟产生一个区块所需要的难度数值即为难度目标。</p><p><strong>难度调整</strong></p><p>整个网络每产生2,106个区块后会根据之前2,106个区块的算力进行难度调整。</p><p><strong>矿工费</strong></p><p>交易的发起者通常会向网络缴纳一笔矿工费，用以处理这笔交易。大多数的交易需要0.5毫比特币的矿工费。</p><p><strong>哈希</strong></p><p>二进制数据的一种数字指纹。</p><p><strong>创世区块</strong></p><p>创世区块指区块链上的第一个区块，用来初始化相应的加密货币。</p><p><strong>矿工</strong></p><p>矿工指通过不断重复哈希运算来产生工作量证明的各网络节点。</p><p><strong>网络</strong></p><p>比特币网络是一个由若干节点组成的用以广播交易信息和数据区块的P2P网络。</p><p><strong>工作量证明</strong></p><p>工作量证明指通过有效计算得到的一小块数据。具体到比特币，矿工必须要在满足全网目标难度的情况下求解SHA256算法。</p><p><strong>奖励</strong></p><p>每一个新区块中都有一定量新创造的比特币用来奖励算出工作量证明的矿工。现阶段每一区块有25比特币的奖励。</p><p><strong>私钥</strong></p><p>用来解锁对应（钱包）地址的一串字符，例如5J76sF8L5jTtzE96r66Sf8cka9y44wdpJjMwCxR3tzLh3ibVPxh。</p><p><strong>交易</strong></p><p>简单地说，交易指把比特币从一个地址转到另一个地址。更准确地说，一笔“交易”指一个经过签名运算的，表达价值转移的数据结构。每一笔“交易”都经过比特币网络传输，由矿工节点收集并封包至区块中，永久保存在区块链某处。</p><p><strong>钱包</strong></p><p>钱包指保存比特币地址和私钥的软件，可以用它来接受、发送、储存你的比特币。</p><h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="什么是比特币"><a href="#什么是比特币" class="headerlink" title="什么是比特币"></a>什么是比特币</h2><p>在一定意义上，比特币才是互联网货币的完美形态。因为它具有快捷、安全、无国界的特性。<br>完全虚拟的。没有实体，拥有密钥是使用比特币的唯一条件</p><p><strong>挖矿</strong></p><p>——在比特币网络中成功写入一个区块交易——的难度是动态调整的，保证不管有多少矿工（多少CPU）挖矿，平均每10分钟只有一个矿工成功。</p><p>比特币协议还规定，每四年新币的开采量减半，同时限制比特币的最终开采总量为2,100万枚</p><p><strong>比特币由这些构成：</strong></p><p>▷ 一个去中心化的点对点网络（比特币协议） </p><p>▷ 一个公共的交易账簿（区块链） </p><p>▷ 一个去中心化的数学的和确定性的货币发行（分布式挖矿） </p><p>▷ 一个去中心化的交易验证系统（交易脚本）</p><p>比特币的去中心化算法解决了以前的数字货币的短板，</p><p><strong>一个分布式计算问题的解决方案</strong></p><p>中本聪的此项发明，对“拜占庭将军”问题也是一个可行的解决方案，这是一个在分布式计算中未曾解决的问题。简单来说，这个问题包括了试图通过在一个不可靠、具有潜在威胁的网络中，通过信息交流来达成一个行动协议共识。中本聪的解决方案是使用<strong>工作量证明</strong>的概念在没有中央信任机构下达成共识，这代表了分布式计算的科学突破，并已经超越了货币广泛的适用性。它可以用来达成去中心化的网络共识来<strong>公正选举、彩票、资产登记，以及数字化公证</strong>等等。</p><h1 id="第2章-比特币的原理"><a href="#第2章-比特币的原理" class="headerlink" title="第2章 比特币的原理"></a>第2章 比特币的原理</h1><p><img src="http://zhibimo.com/read/wang-miao/mastering-bitcoin/Images/Fig201.png" alt=""></p><h1 id="第3章-比特币客户端"><a href="#第3章-比特币客户端" class="headerlink" title="第3章 比特币客户端"></a>第3章 比特币客户端</h1><p><a href="http://zhibimo.com/read/wang-miao/mastering-bitcoin/Chapter03.html" target="_blank" rel="noopener">客户端命令行操作</a></p><h1 id="第4章-密钥、地址、钱包"><a href="#第4章-密钥、地址、钱包" class="headerlink" title="第4章 密钥、地址、钱包"></a>第4章 密钥、地址、钱包</h1><h2 id="4-1-2-私钥和公钥"><a href="#4-1-2-私钥和公钥" class="headerlink" title="4.1.2 私钥和公钥"></a>4.1.2 私钥和公钥</h2><p>一个比特币钱包中包含一系列的密钥对，每个密钥对包括一个私钥和一个公钥。私钥（k）是一个数字，通常是随机选出的。有了私钥，我们就可以使用椭圆曲线乘法这个单向加密函数产生一个公钥（K）。有了公钥（K），我们就可以使用一个单向加密哈希函数生成比特币地址（A）<br><img src="http://zhibimo.com/read/wang-miao/mastering-bitcoin/Images/Fig401.png" alt=""></p><p>使用比特币核心客户端生成一个新的密钥,使用getnewaddress命令。出于安全考虑，命令运行后只显示生成的公钥，而不显示私钥。如果要bitcoind显示私钥，可以使用dumpprivkey命令。dumpprivkey命令会把私钥以Base58校验和编码格式显示，这种私钥格式被称为钱包导入格式（WIF，Wallet Import Format）</p><h2 id="4-1-4-公钥"><a href="#4-1-4-公钥" class="headerlink" title="4.1.4 公钥"></a>4.1.4 公钥</h2><p>通过<strong>椭圆曲线算</strong>法可以从私钥计算得到公钥，这是不可逆转的过程：K = k * G 。其中k是私钥，G是被称为生成点的常数点，而K是所得公钥。其反向运算，被称为“寻找离散对数”——已知公钥K来求出私钥k——是非常困难的，就像去试验所有可能的k值，即暴力搜索。</p><h2 id="4-1-5-椭圆曲线密码学解释"><a href="#4-1-5-椭圆曲线密码学解释" class="headerlink" title="4.1.5 椭圆曲线密码学解释"></a>4.1.5 椭圆曲线密码学解释</h2><p>椭圆曲线加密法是一种基于离散对数问题的非对称（或公钥）加密法，可以用对椭圆曲线上的点进行加法或乘法运算来表达。<br><img src="http://zhibimo.com/read/wang-miao/mastering-bitcoin/Images/Fig402.png" alt=""></p><p>比特币使用了secp256k1标准所定义的一条特殊的椭圆曲线和一系列数学常数。该标准由美国国家标准与技术研究院（NIST）设立。secp256k1曲线由下述函数定义，该函数可产生一条椭圆曲线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y2 = (x3 + 7)&#125; over (Fp)</span><br><span class="line">或</span><br><span class="line">y2 mod p = (x3 + 7) mod p</span><br></pre></td></tr></table></figure></p><p>上述mod p（素数p取模）表明该曲线是在素数阶p的有限域内，也写作Fp，其中p = 2256 – 232 – 29 – 28 – 27 – 26 – 24 – 1，这是一个非常大的素数。</p><h2 id="啥是椭圆曲线"><a href="#啥是椭圆曲线" class="headerlink" title="啥是椭圆曲线"></a>啥是椭圆曲线</h2><p><a href="http://mp.weixin.qq.com/s/jOcVk7olBDgBgoy56m5cxQ" target="_blank" rel="noopener">一篇关于椭圆曲线的文章</a></p><p>二元一次方程表示直线，二元二次方程表示圆锥曲线(圆，椭圆，双曲线和抛物线)，那么二元三次方程表示什么曲线呢？答案自然就是椭圆曲线。为了方便研究，大部分的二元三次方程可以简化成魏尔斯特拉斯方程的形式，见公式(4)。其中，系数a 和b 需要满足条件4a3 + 27b2 ≠ 0，该条件保证方程中不会出现非奇异点以获得平滑的椭圆曲线。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ax + by + z = 0 (1)</span><br><span class="line">ax2 + by2 + cxy + dx + ey + f = 0 (2)</span><br><span class="line">ax3 + bx2y + cxy2 + dy3 + ex2 + fxy + gy2 + hx + iy + j = 0 (3)</span><br><span class="line">y2 = x3 + ax + b (4)</span><br></pre></td></tr></table></figure></p><p>一个违反直觉的事实是：椭圆曲线的形状跟椭圆毫无关系。当初数学家们在研究如何计算椭圆弧长的时候发现需要求解如下类型的积分, 由于和椭圆相关，积分中的分母项y =√(x3+ax+b) 便被称作椭圆曲线。</p><h2 id="4-2-比特币地址"><a href="#4-2-比特币地址" class="headerlink" title="4.2 比特币地址"></a>4.2 比特币地址</h2><p>比特币地址是一个由数字和字母组成的字符串，可以与任何想给你比特币的人分享。由公钥（一个同样由数字和字母组成的字符串）生成的比特币地址以数字“1”开头。下面是一个比特币地址的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1J7mdg5rbQyUHENYdx39WVWK7fsLpEoXZy</span><br></pre></td></tr></table></figure></p><p>在交易中，比特币地址通常以收款方出现。如果把比特币交易比作一张支票，比特币地址就是收款人，也就是我们要写入收款人一栏的内容。一张支票的收款人可能是某个银行账户，也可能是某个公司、机构，甚至是现金支票。支票不需要指定一个特定的账户，而是用一个普通的名字作为收款人，这使它成为一种相当灵活的支付工具.</p><p>比特币地址与公钥不同。比特币地址是由公钥经过单向的哈希函数生成的。</p><p><img src="http://zhibimo.com/read/wang-miao/mastering-bitcoin/Images/Fig405.png" alt=""></p><h2 id="4-3-用Python实现密钥和比特币地址-bitcoin库"><a href="#4-3-用Python实现密钥和比特币地址-bitcoin库" class="headerlink" title="4.3 用Python实现密钥和比特币地址(bitcoin库)"></a>4.3 用Python实现密钥和比特币地址(bitcoin库)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bitcoin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate a random private key</span></span><br><span class="line">valid_private_key = <span class="keyword">False</span> <span class="keyword">while</span> <span class="keyword">not</span> valid_private_key:</span><br><span class="line">    private_key = bitcoin.random_key()</span><br><span class="line">    decoded_private_key = bitcoin.decode_privkey(private_key, <span class="string">'hex'</span>)</span><br><span class="line">    valid_private_key =  <span class="number">0</span> &lt; decoded_private_key &lt; bitcoin.N</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Private Key (hex) is: "</span>, private_key</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Private Key (decimal) is: "</span>, decoded_private_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert private key to WIF format</span></span><br><span class="line">wif_encoded_private_key = bitcoin.encode_privkey(decoded_private_key, <span class="string">'wif'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Private Key (WIF) is: "</span>, wif_encoded_private_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add suffix "01" to indicate a compressed private key</span></span><br><span class="line">compressed_private_key = private_key + <span class="string">'01'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Private Key Compressed (hex) is: "</span>, compressed_private_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate a WIF format from the compressed private key (WIF-compressed)</span></span><br><span class="line">wif_compressed_private_key = bitcoin.encode_privkey(</span><br><span class="line">    bitcoin.decode_privkey(compressed_private_key, <span class="string">'hex'</span>), <span class="string">'wif'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Private Key (WIF-Compressed) is: "</span>, wif_compressed_private_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># Multiply the EC generator point G with the private key to get a public key point</span></span><br><span class="line">public_key = bitcoin.base10_multiply(bitcoin.G, decoded_private_key) <span class="keyword">print</span> <span class="string">"Public Key (x,y) coordinates is:"</span>, public_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># Encode as hex, prefix 04</span></span><br><span class="line">hex_encoded_public_key = bitcoin.encode_pubkey(public_key,<span class="string">'hex'</span>) <span class="keyword">print</span> <span class="string">"Public Key (hex) is:"</span>, hex_encoded_public_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compress public key, adjust prefix depending on whether y is even or odd</span></span><br><span class="line">(public_key_x, public_key_y) = public_key <span class="keyword">if</span> (public_key_y % <span class="number">2</span>) == <span class="number">0</span>:</span><br><span class="line">    compressed_prefix = <span class="string">'02'</span> </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    compressed_prefix = <span class="string">'03'</span></span><br><span class="line">hex_compressed_public_key = compressed_prefix + bitcoin.encode(public_key_x, <span class="number">16</span>) <span class="keyword">print</span> <span class="string">"Compressed Public Key (hex) is:"</span>, hex_compressed_public_key</span><br><span class="line"><span class="comment"># Generate bitcoin address from public key</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Bitcoin Address (b58check) is:"</span>, bitcoin.pubkey_to_address(public_key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate compressed bitcoin address from compressed public key</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Compressed Bitcoin Address (b58check) is:"</span>, \        bitcoin.pubkey_to_address(hex_compressed_public_key)</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ python key-to-address-ecc-example.py</span><br><span class="line">Private Key (hex) is:</span><br><span class="line"> 3aba4162c7251c891207b747840551a71939b0de081f85c4e44cf7c13e41daa6</span><br><span class="line">Private Key (decimal) is:</span><br><span class="line"> 26563230048437957592232553826663696440606756685920117476832299673293013768870</span><br><span class="line">Private Key (WIF) is:</span><br><span class="line"> 5JG9hT3beGTJuUAmCQEmNaxAuMacCTfXuw1R3FCXig23RQHMr4K</span><br><span class="line">Private Key Compressed (hex) is:</span><br><span class="line"> 3aba4162c7251c891207b747840551a71939b0de081f85c4e44cf7c13e41daa601</span><br><span class="line">Private Key (WIF-Compressed) is:</span><br><span class="line"> KyBsPXxTuVD82av65KZkrGrWi5qLMah5SdNq6uftawDbgKa2wv6S</span><br><span class="line">Public Key (x,y) coordinates is:</span><br><span class="line"> (41637322786646325214887832269588396900663353932545912953362782457239403430124L,</span><br><span class="line"> 16388935128781238405526710466724741593761085120864331449066658622400339362166L)</span><br><span class="line">Public Key (hex) is:</span><br><span class="line"> 045c0de3b9c8ab18dd04e3511243ec2952002dbfadc864b9628910169d9b9b00ec↵</span><br><span class="line">243bcefdd4347074d44bd7356d6a53c495737dd96295e2a9374bf5f02ebfc176</span><br><span class="line">Compressed Public Key (hex) is:</span><br><span class="line"> 025c0de3b9c8ab18dd04e3511243ec2952002dbfadc864b9628910169d9b9b00ec</span><br><span class="line">Bitcoin Address (b58check) is:</span><br><span class="line"> 1thMirt546nngXqyPEz532S8fLwbozud8</span><br><span class="line">Compressed Bitcoin Address (b58check) is:</span><br><span class="line"> 14cxpo3MBCYYWCgF74SWTdcmxipnGUsPw3</span><br></pre></td></tr></table></figure><h2 id="4-3-用Python实现密钥和比特币地址-椭圆曲线"><a href="#4-3-用Python实现密钥和比特币地址-椭圆曲线" class="headerlink" title="4.3 用Python实现密钥和比特币地址(椭圆曲线)"></a>4.3 用Python实现密钥和比特币地址(椭圆曲线)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ecdsa</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> ecdsa.util <span class="keyword">import</span> string_to_number, number_to_string</span><br><span class="line"></span><br><span class="line"><span class="comment"># secp256k1, http://www.oid-info.com/get/1.3.132.0.10</span></span><br><span class="line">_p = <span class="number">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2FL</span></span><br><span class="line">_r = <span class="number">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141L</span></span><br><span class="line">_b = <span class="number">0x0000000000000000000000000000000000000000000000000000000000000007L</span></span><br><span class="line">_a = <span class="number">0x0000000000000000000000000000000000000000000000000000000000000000L</span></span><br><span class="line">_Gx = <span class="number">0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798L</span></span><br><span class="line">_Gy = <span class="number">0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8L</span></span><br><span class="line">curve_secp256k1 = ecdsa.ellipticcurve.CurveFp(_p, _a, _b)</span><br><span class="line">generator_secp256k1 = ecdsa.ellipticcurve.Point(curve_secp256k1, _Gx, _Gy, _r)</span><br><span class="line">oid_secp256k1 = (<span class="number">1</span>, <span class="number">3</span>, <span class="number">132</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">SECP256k1 = ecdsa.curves.Curve(<span class="string">"SECP256k1"</span>, curve_secp256k1, generator_secp256k1,</span><br><span class="line">oid_secp256k1)</span><br><span class="line">ec_order = _r</span><br><span class="line"></span><br><span class="line">curve = curve_secp256k1</span><br><span class="line">generator = generator_secp256k1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_secret</span><span class="params">()</span>:</span></span><br><span class="line">    random_char = <span class="keyword">lambda</span>: chr(random.randint(<span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">    convert_to_int = <span class="keyword">lambda</span> array:     int(<span class="string">""</span>.join(array).encode(<span class="string">"hex"</span>), <span class="number">16</span>) </span><br><span class="line">    byte_array = [random_char() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>)]</span><br><span class="line">    <span class="keyword">return</span> convert_to_int(byte_array)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_point_pubkey</span><span class="params">(point)</span>:</span> </span><br><span class="line">    <span class="keyword">if</span> point.y() &amp; <span class="number">1</span>:</span><br><span class="line">        key = <span class="string">'03'</span> + <span class="string">'%064x'</span> % point.x() </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        key = <span class="string">'02'</span> + <span class="string">'%064x'</span> % point.x() </span><br><span class="line">    <span class="keyword">return</span> key.decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_point_pubkey_uncompressed</span><span class="params">(point)</span>:</span> </span><br><span class="line">    key=<span class="string">'04'</span>+\</span><br><span class="line">        <span class="string">'%064x'</span> % point.x() + \</span><br><span class="line">        <span class="string">'%064x'</span> % point.y() </span><br><span class="line">    <span class="keyword">return</span> key.decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate a new private key.</span></span><br><span class="line">secret = random_secret() </span><br><span class="line"><span class="keyword">print</span> <span class="string">"Secret: "</span>, secret</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the public key point.</span></span><br><span class="line">point = secret * generator </span><br><span class="line"><span class="keyword">print</span> <span class="string">"EC point:"</span>, point</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"BTC public key:"</span>, get_point_pubkey(point).encode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Given the point (x, y) we can create the object using:</span></span><br><span class="line">point1 = ecdsa.ellipticcurve.Point(curve, point.x(), point.y(), ec_order) </span><br><span class="line"><span class="keyword">assert</span> point1 == point</span><br></pre></td></tr></table></figure><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">running the ec_math.py script</span><br><span class="line">$ # Install Python PIP package manager</span><br><span class="line">$ sudo apt-get install python-pip</span><br><span class="line">$ # Install the Python ECDSA library</span><br><span class="line">$ sudo pip install ecdsa</span><br><span class="line">$ # Run the script</span><br><span class="line">$ python ec-math.py</span><br><span class="line">Secret:</span><br><span class="line"><span class="number">38090835015954358862481132628887443905906204995912378278060168703580660294000</span></span><br><span class="line">EC point:</span><br><span class="line">(<span class="number">70048853531867179489857750497606966272382583471322935454624595540007269312627</span>,</span><br><span class="line"><span class="number">105262206478686743191060800263479589329920209527285803935736021686045542353380</span>)</span><br><span class="line">BTC <span class="keyword">public</span> key: <span class="number">029</span>ade3effb0a67d5c8609850d797366af428f4a0d5194cb221d807770a1522873</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h2 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;地址&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;比特币地址（例如：1DSrfJdB2AnWaFNgSbv3MZC2m74996JafV）由一串字符和数字组成，以阿拉伯数字“1”开头。就像别人向你的email地址发送电子邮件一样，他可以通过你的比特币地址向你发送比特币。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BIP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比特币改进提议 （Bitcoin Improvement Proposals 的缩写），指比特币社区成员所提交的一系列改进比特币的提议。例如，BIP0021是一项改进比特币统一资源标识符（URI）计划的提议。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;比特币&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“比特币”既可以指这种虚拟货币单位，也指比特币网络或者网络节点使用的比特币软件。&lt;br&gt;
    
    </summary>
    
      <category term="blockchain" scheme="https://github.com/gokoo/gokoo.github.io.git/categories/blockchain/"/>
    
    
      <category term="算法" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="blockchain" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/blockchain/"/>
    
      <category term="比特币" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>IDE的选择和配置</title>
    <link href="https://github.com/gokoo/gokoo.github.io.git/2016/09/13/5.ide%E7%9A%84%E9%80%89%E6%8B%A9%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>https://github.com/gokoo/gokoo.github.io.git/2016/09/13/5.ide的选择和配置/</id>
    <published>2016-09-13T10:46:25.000Z</published>
    <updated>2020-03-17T13:16:05.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ide的选择"><a href="#ide的选择" class="headerlink" title="ide的选择"></a>ide的选择</h2><p>ide这方面我还是比较推荐<a href="http://www.sublimetext.com/3" target="_blank" rel="noopener">Sublime Text</a>按需求下载（失效后自行搜索）<br><a href="http://www.jianshu.com/p/656b0c24141e" target="_blank" rel="noopener">激活步骤</a><br>以上都是在Mac开发环境下的配置，Windows的就不贴了</p><h2 id="SublimeText语法高亮"><a href="#SublimeText语法高亮" class="headerlink" title="SublimeText语法高亮"></a>SublimeText语法高亮</h2><ol><li>首先下载—&gt;<a href="https://pan.baidu.com/s/1nvdIigD" target="_blank" rel="noopener">配置文件</a> <strong>密码: d8k8</strong></li><li>导航栏里选择Tools-&gt;Developer-&gt;New Syntax</li><li>打开下载的文件，复制到New Syntax新创建的文件当中，然后保存（保存的名字为Plain we.sublime-syntax）</li><li>打开.we文件，这时候应该就有语法高亮了</li></ol><h2 id="idea或者WebStrom"><a href="#idea或者WebStrom" class="headerlink" title="idea或者WebStrom"></a>idea或者WebStrom</h2><p>下面是激活码<br><a id="more"></a><br>8NGRYV8NBV-eyJsaWNlbnNlSWQiOiI4TkdSWVY4TkJWIiwibGljZW5zZWVOYW1lIjoiYWxpY2FzIGFnaWxlIiwi</p><p>YXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6</p><p>IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInBy</p><p>b2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTctMDUtMjEifSx7ImNvZGUiOiJB</p><p>QyIsInBhaWRVcFRvIjoiMjAxNy0wNS0yMSJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjAx</p><p>Ny0wNS0yMSJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTA1LTIxIn0seyJjb2RlIjoi</p><p>RE0iLCJwYWlkVXBUbyI6IjIwMTctMDUtMjEifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAx</p><p>Ny0wNS0yMSJ9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjAxNy0wNS0yMSJ9LHsiY29kZSI6</p><p>IlJDIiwicGFpZFVwVG8iOiIyMDE3LTA1LTIxIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIw</p><p>MTctMDUtMjEifSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAxNy0wNS0yMSJ9LHsiY29kZSI6</p><p>IldTIiwicGFpZFVwVG8iOiIyMDE3LTA1LTIxIn0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIw</p><p>MTctMDUtMjEifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxNy0wNS0yMSJ9XSwiaGFzaCI6</p><p>IjM4MTEyNTYvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwi</p><p>aXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-ZkM30EtrYD1I1yfVlugRks1bv/0hs4IuraASRo3Wj0J1l+6MiR0V3aH1NTomi6bQKl3iACHpcoeg</p><p>0ZAwyOpKPbCF1TrgPMvXLhFFS1D9BtaMaPdmVOY098jIwIxKs4WrtaKHJOqmvjmS64QyQW/LmTXQ</p><p>J+lPNJZ81fcB8GDbc8EJfzlC5byhPiCAveZMT60lu5ZWn7jdSQTOrXZYeyPz0ZQjbI1F6yS0IGs6</p><p>65NJRUBujUEGWdmpqalg1abrD/flSK1Acz4jJoxWEtad8MfqXKW3Ugo8EAGVUqlasC3yyiiD8NdJ</p><p>Zx6fqMvDJTpdwlzMmeR1EV/PXmh8gd58A+3eKQ==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENB</p><p>MB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjAN</p><p>BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEk</p><p>rJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+</p><p>07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt</p><p>0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8</p><p>oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwID</p><p>AQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1Ud</p><p>IwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENB</p><p>ggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEB</p><p>CwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBa</p><p>CJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOd</p><p>lWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2d</p><p>Dup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1</p><p>+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc</p><p>45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUO</p><p>H3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYi</p><p>KX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD</p><p>2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqq</p><p>DLgkNzuoog==</p><h2 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h2><p><img src="/images/0AC5A93562319D348DA032FAFBF75CB3.png" alt=""></p><p>原理就是把 *.we 的文件识别成HTML同样也可以语法高亮，idea有一个民间大神开发的weex插件，可以在右侧直接预览效果以及快速生成当前页面的二维码，蛮不错。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ide的选择&quot;&gt;&lt;a href=&quot;#ide的选择&quot; class=&quot;headerlink&quot; title=&quot;ide的选择&quot;&gt;&lt;/a&gt;ide的选择&lt;/h2&gt;&lt;p&gt;ide这方面我还是比较推荐&lt;a href=&quot;http://www.sublimetext.com/3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sublime Text&lt;/a&gt;按需求下载（失效后自行搜索）&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/656b0c24141e&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;激活步骤&lt;/a&gt;&lt;br&gt;以上都是在Mac开发环境下的配置，Windows的就不贴了&lt;/p&gt;
&lt;h2 id=&quot;SublimeText语法高亮&quot;&gt;&lt;a href=&quot;#SublimeText语法高亮&quot; class=&quot;headerlink&quot; title=&quot;SublimeText语法高亮&quot;&gt;&lt;/a&gt;SublimeText语法高亮&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;首先下载—&amp;gt;&lt;a href=&quot;https://pan.baidu.com/s/1nvdIigD&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;配置文件&lt;/a&gt; &lt;strong&gt;密码: d8k8&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;导航栏里选择Tools-&amp;gt;Developer-&amp;gt;New Syntax&lt;/li&gt;
&lt;li&gt;打开下载的文件，复制到New Syntax新创建的文件当中，然后保存（保存的名字为Plain we.sublime-syntax）&lt;/li&gt;
&lt;li&gt;打开.we文件，这时候应该就有语法高亮了&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;idea或者WebStrom&quot;&gt;&lt;a href=&quot;#idea或者WebStrom&quot; class=&quot;headerlink&quot; title=&quot;idea或者WebStrom&quot;&gt;&lt;/a&gt;idea或者WebStrom&lt;/h2&gt;&lt;p&gt;下面是激活码&lt;br&gt;
    
    </summary>
    
      <category term="WEEX" scheme="https://github.com/gokoo/gokoo.github.io.git/categories/WEEX/"/>
    
    
      <category term="WEEX" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/WEEX/"/>
    
      <category term="web" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/web/"/>
    
      <category term="跨平台" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="ide" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/ide/"/>
    
  </entry>
  
  <entry>
    <title>了解工程</title>
    <link href="https://github.com/gokoo/gokoo.github.io.git/2016/09/13/4.%E4%BA%86%E8%A7%A3%E5%B7%A5%E7%A8%8B/"/>
    <id>https://github.com/gokoo/gokoo.github.io.git/2016/09/13/4.了解工程/</id>
    <published>2016-09-13T09:46:25.000Z</published>
    <updated>2020-03-19T02:18:58.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="了解工程"><a href="#了解工程" class="headerlink" title="了解工程"></a>了解工程</h2><p>目前基于npm的程序越来越多，那么package.json就显得十分必要了。所以说对于weex项目的开发npm和webpack的使用还是很重要的。</p><h2 id="需要了解什么"><a href="#需要了解什么" class="headerlink" title="需要了解什么"></a>需要了解什么</h2><p>如果是单一职责的工程师，比如单纯的前端工程师。那么他在开发的时候需要了解什么？这个对于项目的开发者而言，比较重要。因为，一个比较的好界限可以快速上手工作。当然，我还是提倡都要有所了解，毕竟，了解三端，才能更加高效的开发优质移动应用，技多不压身嘛。 这里简单谈一下单纯的某一职责的工程师，建议应该了解些什么。         </p><ul><li>前端工程师<br>  我认为web工程师应该最好上手了，大部分都应该是分内知识，例如盒子模型、Flexbox布局等；webpack工程构建也已经是普遍情况了。那么前端工程师应该去了解XCode安装及如何运行项目、了解CocoaPods。了解Android环境的搭建和工程的构建。            </li><li>iOS工程师<br>对于iOS工程师，大体需要了解的是web的样式和布局。还有前面提到的webpack.config.js和package.json。        </li><li>Android工程师<br>  布局和样式这块，Android和前端有一定的相通之处，但是盒子模型有些差异。这一块是需要补充了解的。当然，了解webpack.config.js和package.json也是十分重要的。            </li></ul><h2 id="协同合作"><a href="#协同合作" class="headerlink" title="协同合作"></a>协同合作</h2><p>Weex是集三端的一个技术产品，因此三端都不可或缺。很多时候Weex不可能满足海量的需求，也无法去给每一位开发者定制。因此，自己动手风衣足食。     </p><ul><li><p>扩展iOS组件：<a href="http://alibaba.github.io/weex/doc/advanced/extend-to-ios.html" target="_blank" rel="noopener">http://alibaba.github.io/weex/doc/advanced/extend-to-ios.html</a>    </p></li><li><p>扩展Android组件：<a href="http://alibaba.github.io/weex/doc/advanced/extend-to-android.html" target="_blank" rel="noopener">http://alibaba.github.io/weex/doc/advanced/extend-to-android.html</a>    </p></li><li>扩展Web组件： <a href="http://alibaba.github.io/weex/doc/advanced/extend-to-html5.html" target="_blank" rel="noopener">http://alibaba.github.io/weex/doc/advanced/extend-to-html5.html</a>    </li><li>与iOS集成： <a href="http://alibaba.github.io/weex/doc/advanced/integrate-to-ios.html" target="_blank" rel="noopener">http://alibaba.github.io/weex/doc/advanced/integrate-to-ios.html</a>   </li><li>与Android集成：<a href="http://alibaba.github.io/weex/doc/advanced/extend-to-android.html" target="_blank" rel="noopener">http://alibaba.github.io/weex/doc/advanced/extend-to-android.html</a>    </li><li>与Web集成：<a href="http://alibaba.github.io/weex/doc/advanced/integrate-to-html5.html" target="_blank" rel="noopener">http://alibaba.github.io/weex/doc/advanced/integrate-to-html5.html</a>    </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;了解工程&quot;&gt;&lt;a href=&quot;#了解工程&quot; class=&quot;headerlink&quot; title=&quot;了解工程&quot;&gt;&lt;/a&gt;了解工程&lt;/h2&gt;&lt;p&gt;目前基于npm的程序越来越多，那么package.json就显得十分必要了。所以说对于weex项目的开发npm和webpac
      
    
    </summary>
    
      <category term="WEEX" scheme="https://github.com/gokoo/gokoo.github.io.git/categories/WEEX/"/>
    
    
      <category term="WEEX" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/WEEX/"/>
    
      <category term="web" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/web/"/>
    
      <category term="跨平台" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>初始化工程</title>
    <link href="https://github.com/gokoo/gokoo.github.io.git/2016/09/13/3.%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B7%A5%E7%A8%8B/"/>
    <id>https://github.com/gokoo/gokoo.github.io.git/2016/09/13/3.初始化工程/</id>
    <published>2016-09-13T08:46:25.000Z</published>
    <updated>2020-03-17T13:16:05.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化工程"><a href="#初始化工程" class="headerlink" title="初始化工程"></a>初始化工程</h2><p> 这里，我尝试用简单的方式来说明一个工程的构建。然后，再将简单的方式工程化（复杂化），最后拼凑成目前weex开源的代码结构。   </p><h2 id="安装weex-toolkit"><a href="#安装weex-toolkit" class="headerlink" title="安装weex-toolkit"></a>安装weex-toolkit</h2><p> <strong>这里要说明的是，目前最新版本的weex-toolkit0.5.2有bug,babel组件丢失的问题，解决办法可以添加babel组件依赖，也可以降级weex-toolkit</strong><br> <strong>下面是此问题的issue</strong><br> <a href="https://github.com/alibaba/weex/issues/1218">WeexBabelError issue</a><br>weex-toolkit是一个很好的工具供我们工程构建。首先，第一步是安装该工具：   </p><pre><code>$npm install -g weex-toolkit       </code></pre><p>测试weex-toolkit是否安装成功，可以使用如下命令测试：       </p><pre><code>$ weex --version       info 0.4.4      </code></pre><p>如果显示版本号即为成功。<br><a id="more"></a></p><h3 id="weex-toolkit常用命令"><a href="#weex-toolkit常用命令" class="headerlink" title="weex-toolkit常用命令"></a>weex-toolkit常用命令</h3><ol><li>–qr :显示二维码</li><li>-o   ：把weex文件渲染成js</li><li>weex $filename :在浏览器查看we的效果</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">^Cbogon:WeexProj Tec_yifei$ weex</span><br><span class="line">info </span><br><span class="line">Usage: weex foo/bar/we_file_or_dir_path  [options]</span><br><span class="line">Usage: weex init</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">  --qr          display QR code <span class="keyword">for</span> native runtime, <span class="keyword">default</span> action     [boolean]</span><br><span class="line">  -o, --output  transform weex we file to JS Bundle, output path must specified</span><br><span class="line">                (single JS bundle file <span class="keyword">or</span> dir)</span><br><span class="line">                [<span class="keyword">for</span> create sub cmd]it specified we file output path</span><br><span class="line">                                                  [默认值: <span class="string">"no JSBundle output"</span>]</span><br><span class="line">  --watch       <span class="keyword">using</span> with -o , watch input path , <span class="keyword">auto</span> run transform <span class="keyword">if</span> change</span><br><span class="line">                happen</span><br><span class="line">  -s, --server  start a http file server, weex .we file will be transforme to JS</span><br><span class="line">                bundle on the server , specify local root path <span class="keyword">using</span> the option</span><br><span class="line">                                                                        [<span class="built_in">string</span>]</span><br><span class="line">  --port        http listening port number ,<span class="keyword">default</span> is <span class="number">8081</span>         [默认值: <span class="number">-1</span>]</span><br><span class="line">  --wsport      websocket listening port number ,<span class="keyword">default</span> is <span class="number">8082</span>    [默认值: <span class="number">-1</span>]</span><br><span class="line">  --np          <span class="keyword">do</span> <span class="keyword">not</span> open preview browser automatic                  [boolean]</span><br><span class="line">  -f, --force   [for create sub cmd]force to replace exsisting file(s) [boolean]</span><br><span class="line">  --help        显示帮助信息                                           [boolean]</span><br><span class="line">  -h, --host                                               [默认值: <span class="string">"127.0.0.1"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> example &amp; more information visit https:<span class="comment">//www.npmjs.com/package/weex-toolkit</span></span><br></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>这里，我们不再使用weex 跑一个文件的形式。我们需要一个较为完整的方案，因此，这里采用weex init命令创建项目。         </p><p>首先，我们创建一个目录存放我们的项目，启动命令行：     </p><pre><code>$ mkdir test      $ cd test    $ weex init     //下面一路回车    prompt: Project Name:  (test)     file: .gitignore created.    file: README.md created.    file: index.html created.    file: package.json created.    file: src/main.we created.    file: webpack.config.js created.     </code></pre><h2 id="跑起项目"><a href="#跑起项目" class="headerlink" title="跑起项目"></a>跑起项目</h2><p>首先，我们需要安装依赖。以后大家看到package.json文件，就可以直接npm install 安装模块了。           </p><pre><code>$ npm install </code></pre><p>依赖安装完成，启动项目编译。</p><pre><code>$ npm run dev       </code></pre><p> 启动本地服务器。    </p><pre><code>$ npm run serve            </code></pre><p> 这时，打开浏览器，输入<a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a>, 就会看到如下界面效果:       </p><p><img src="/images/C0BBB74BD2AB01B005799E3C19DA4B42.png" alt=""></p><h2 id="npm-run-dev干了什么事儿"><a href="#npm-run-dev干了什么事儿" class="headerlink" title="npm run dev干了什么事儿"></a>npm run dev干了什么事儿</h2><p>这一些都是node/npm的常识了（所以对于萌新来说这都是坑）。首先，我们打开package.json文件。可以看到如下代码：     </p><p><img src="/images/2921B70E8426AEF20538254492591280.png" alt=""></p><p> 我们可以看到scripts里面包含了build、dev、serve、test四个属性。例如dev属性,npm run dev实际上相当于 webpack –watch。即等同开发者做了这件事:   </p><pre><code>$ webpack --watch        </code></pre><p> ok，看到这里明白了。npm run dev调用了webpack。那么，webpack实际上是执行了配置文件。<br> webpack默认是webpack.config.js作为配置文件的。所以看一下webpack.config.js中的内容。       </p><p><strong>关于webpack的学习资料</strong><br><a href="https://segmentfault.com/a/1190000002551952" target="_blank" rel="noopener">webpack入门指迷</a></p><p><img src="/images/8EB8FDA4F1641F3B97F9A7C04E8E0A78.png" alt=""></p><p>  这个文件比较好理解。一个是引入了webpack的配置，一个是使用了weex-loader模块。<br>  entry属性是表示入口文件，output表示输出文件，默认输出到dist文件夹。所有打开dist就可以看到一个打包完成的main.js文件。      </p><h2 id="npm-run-serve"><a href="#npm-run-serve" class="headerlink" title="npm run serve"></a>npm run serve</h2><p>这个同上，主要是做一个服务器，提供浏览器访问静态资源。     </p><h2 id="入口文件index-html"><a href="#入口文件index-html" class="headerlink" title="入口文件index.html"></a>入口文件index.html</h2><p>是时候，去了解我们index.html文件干了一件啥事。其实，index.html就是页面的入口文件。具体大码如下：            </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Weex HTML5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-touch-fullscreen"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no, email=no"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html, body, #weex &#123;</span></span><br><span class="line"><span class="undefined">      width: 100%;</span></span><br><span class="line"><span class="undefined">      height: 100%;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/weex-html5/dist/weex.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"weex"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  /**</span></span><br><span class="line"><span class="undefined">   * Init weex instance depending on the url params.</span></span><br><span class="line"><span class="undefined">   * There are three ways to load weex bundles, depends on the</span></span><br><span class="line"><span class="undefined">   * parameter 'loader' in the url:</span></span><br><span class="line"><span class="undefined">   *</span></span><br><span class="line"><span class="undefined">   *   + xhr: use XMLHttpRequest. Parameter 'page' should be</span></span><br><span class="line"><span class="undefined">   *   the bundle's url.</span></span><br><span class="line"><span class="undefined">   *   + source: use the transformed code itself. 'page' should</span></span><br><span class="line"><span class="undefined">   *   be the transformed weex bundle.</span></span><br><span class="line"><span class="undefined">   *</span></span><br><span class="line"><span class="undefined">   * @param &#123;String&#125; bundle - It has different meaning depends on</span></span><br><span class="line"><span class="undefined">   *   the type of loader.</span></span><br><span class="line"><span class="undefined">   */</span></span><br><span class="line"><span class="undefined">  (function () &#123;</span></span><br><span class="line"><span class="undefined">    function getUrlParam (key) &#123;</span></span><br><span class="line"><span class="undefined">      var reg = new RegExp('[?|&amp;]' + key + '=([^&amp;]+)')</span></span><br><span class="line"><span class="undefined">      var match = location.search.match(reg)</span></span><br><span class="line"><span class="undefined">      return match &amp;&amp; match[1]</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var loader = getUrlParam('loader') || 'xhr'</span></span><br><span class="line"><span class="undefined">    var page = getUrlParam('page') || 'dist/main.js'</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    window.weex.init(&#123;</span></span><br><span class="line"><span class="undefined">      appId: location.href,</span></span><br><span class="line"><span class="undefined">      loader: loader,</span></span><br><span class="line"><span class="undefined">      source: page,</span></span><br><span class="line"><span class="undefined">      rootId: 'weex'</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;)();</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>作为入口和载体，html做了两件事：<br>1) 拿到页面的URL，根据page参数获得需要加载的js文件路径<br>2）初始化weex实例，加载文件。<br>此处文章可参考：<a href="http://alibaba.github.io/weex/doc/advanced/integrate-to-html5.html" target="_blank" rel="noopener">http://alibaba.github.io/weex/doc/advanced/integrate-to-html5.html</a>     </p><h2 id="更好的理解weex-github源码结构"><a href="#更好的理解weex-github源码结构" class="headerlink" title="更好的理解weex github源码结构"></a>更好的理解weex github源码结构</h2><p>到这里，整个weex项目的来龙去脉，应该是比较清楚了。那么，回过头来看，weex开源代码如何构建，应该是件水到渠成的事了。比如看这段打包的配置代码：<a href="https://github.com/alibaba/weex/blob/dev/build/webpack.examples.config.js">https://github.com/alibaba/weex/blob/dev/build/webpack.examples.config.js</a>          </p><pre><code class="javascript"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);<span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);<span class="keyword">var</span> entry = {};<span class="function"><span class="keyword">function</span> <span class="title">walk</span>(<span class="params">dir</span>) </span>{  dir = dir || <span class="string">'.'</span>  <span class="keyword">var</span> directory = path.join(__dirname, <span class="string">'../examples'</span>, dir);  fs.readdirSync(directory)    .forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>{      <span class="keyword">var</span> fullpath = path.join(directory, file);      <span class="keyword">var</span> stat = fs.statSync(fullpath);      <span class="keyword">var</span> extname = path.extname(fullpath);      <span class="keyword">if</span> (stat.isFile() &amp;&amp; extname === <span class="string">'.we'</span>) {        <span class="keyword">var</span> name = path.join(<span class="string">'examples'</span>, <span class="string">'build'</span>, dir, path.basename(file, extname));        entry[name] = fullpath + <span class="string">'?entry=true'</span>;      } <span class="keyword">else</span> <span class="keyword">if</span> (stat.isDirectory() &amp;&amp; file !== <span class="string">'build'</span> &amp;&amp; file !== <span class="string">'include'</span>) {        <span class="keyword">var</span> subdir = path.join(dir, file);        walk(subdir);      }    });}walk();<span class="built_in">module</span>.exports = {  entry: entry,  output : {    path: <span class="string">'.'</span>,    filename: <span class="string">'[name].js'</span>  },  <span class="built_in">module</span>: {    loaders: [      {        test: <span class="regexp">/\.we(\?[^?]+)?$/</span>,        loader: <span class="string">'weex'</span>      },      {        test: <span class="regexp">/\.js(\?[^?]+)?$/</span>,        loader: <span class="string">'weex?type=script'</span>      },      {        test: <span class="regexp">/\.css(\?[^?]+)?$/</span>,        loader: <span class="string">'weex?type=style'</span>      },       {        test: <span class="regexp">/\.html(\?[^?]+)?$/</span>,        loader: <span class="string">'weex?type=tpl'</span>      }    ]  }}</code></pre><p>就是编译examples目录下所有.we文件到build目录。代码可以细看，都是Node.js File System相关的API.     </p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>1、<a href="http://zct1989.oschina.io/2016/07/04/weex1/" target="_blank" rel="noopener">weex环境搭建</a><br>2、<a href="http://zct1989.oschina.io/2016/07/06/weex2/" target="_blank" rel="noopener">weex的HelloWorld起手式</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初始化工程&quot;&gt;&lt;a href=&quot;#初始化工程&quot; class=&quot;headerlink&quot; title=&quot;初始化工程&quot;&gt;&lt;/a&gt;初始化工程&lt;/h2&gt;&lt;p&gt; 这里，我尝试用简单的方式来说明一个工程的构建。然后，再将简单的方式工程化（复杂化），最后拼凑成目前weex开源的代码结构。   &lt;/p&gt;
&lt;h2 id=&quot;安装weex-toolkit&quot;&gt;&lt;a href=&quot;#安装weex-toolkit&quot; class=&quot;headerlink&quot; title=&quot;安装weex-toolkit&quot;&gt;&lt;/a&gt;安装weex-toolkit&lt;/h2&gt;&lt;p&gt; &lt;strong&gt;这里要说明的是，目前最新版本的weex-toolkit0.5.2有bug,babel组件丢失的问题，解决办法可以添加babel组件依赖，也可以降级weex-toolkit&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;下面是此问题的issue&lt;/strong&gt;&lt;br&gt; &lt;a href=&quot;https://github.com/alibaba/weex/issues/1218&quot;&gt;WeexBabelError issue&lt;/a&gt;&lt;br&gt;weex-toolkit是一个很好的工具供我们工程构建。首先，第一步是安装该工具：   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$npm install -g weex-toolkit       
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试weex-toolkit是否安装成功，可以使用如下命令测试：       &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ weex --version       
info 0.4.4      
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果显示版本号即为成功。&lt;br&gt;
    
    </summary>
    
      <category term="WEEX" scheme="https://github.com/gokoo/gokoo.github.io.git/categories/WEEX/"/>
    
    
      <category term="WEEX" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/WEEX/"/>
    
      <category term="web" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/web/"/>
    
      <category term="跨平台" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>初识Weexdemo-Example</title>
    <link href="https://github.com/gokoo/gokoo.github.io.git/2016/09/13/2.%E5%88%9D%E8%AF%86Weexdemo-Example/"/>
    <id>https://github.com/gokoo/gokoo.github.io.git/2016/09/13/2.初识Weexdemo-Example/</id>
    <published>2016-09-13T06:46:25.000Z</published>
    <updated>2020-03-19T03:31:14.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="了解Weex源码结构，修改example"><a href="#了解Weex源码结构，修改example" class="headerlink" title="了解Weex源码结构，修改example"></a>了解Weex源码结构，修改example</h2><p>其实，写一个简单的带有样式的界面还是挺简单的。接下来就是要学习官方给的example示例，看一下官方的目录结构以及示例代码，开发过程中遇到的不明白的问题其实很多都能在官方demo里找到答案。         </p><h2 id="1-下载Weex源码"><a href="#1-下载Weex源码" class="headerlink" title="1. 下载Weex源码"></a>1. 下载Weex源码</h2><p><a href="https://github.com/alibaba/weex">weexGithub</a><br>这里可以用 <strong>git clone</strong> 或者直接download</p><pre><code>$ git clone https://github.com/alibaba/weex.git    </code></pre><h2 id="2-了解源码结构"><a href="#2-了解源码结构" class="headerlink" title="2.了解源码结构"></a>2.了解源码结构</h2><p>代码下载完成了，先看一下源码的目录结构。  </p><p><img src="/images/EAFF24F8C94E94BDA4EF1111E6B93CA1.png" alt=""><br><a id="more"></a><br>有几个比较重要的目录和文件：  </p><ul><li>package.json :    node_modules依赖，更重要的是里面包含了npm run xxx 等快捷命令。这里我们可以把它配置化，例如package.json文件中的：        </li></ul><p><img src="/images/17938710144706F3052DDAFA73DEE6D4.png" alt=""></p><ul><li><p>start文件: 启动程序文件，<strong>相当于Windows下面的*.bat脚本文件</strong>：      </p><pre><code>#called by native   THIS_DIR=$(dirname &quot;$0&quot;)pushd &quot;$THIS_DIR&quot;npm run build:nativenpm run build:browsernpm run serve &amp;npm run dev:examplespopd</code></pre></li></ul><p>其中npm run就是执行package.json中的定义好的脚本别名。          </p><ul><li>examples: 示例Demo      </li><li>android/ios/html： 各平台代码   </li><li>build：打包各平台的脚本，配置在package.json中。         </li></ul><h2 id="3-运行Weex"><a href="#3-运行Weex" class="headerlink" title="3.运行Weex"></a>3.运行Weex</h2><p>下面是weex github仓库README.md，按照下面步骤即可跑起来。     </p><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><ol start="0"><li>Prerequisites<ol start="0"><li>Install <a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 4.0+</li><li>Under project root <ol start="0"><li><code>npm install</code>, install project </li><li><code>./start</code></li></ol></li><li>Install <a href="http://developer.android.com/training/basics/firstapp/index.html" target="_blank" rel="noopener">Android Environment</a></li></ol></li><li>Run playground, In Android Studio<ol start="0"><li>Open <code>android/playground</code></li><li>In <code>app/java/com.alibaba.weex/IndexActivity</code>, modify <code>CURRENT_IP</code> to your local IP</li><li>Click <img src="http://gtms04.alicdn.com/tps/i4/TB1wCcqMpXXXXakXpXX3G7tGXXX-34-44.png" height="16"> (<code>Run</code> button)</li></ol></li><li><a href="./examples/README.md#add-an-example">Add an example</a></li></ol><h4 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h4><p>On Android Platform , Weex code is executed in <a href="https://github.com/alibaba/weex_v8core">weex_v8core</a> which is based on Google V8 JavaScript engine.</p><h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><ol start="0"><li>Prerequisites<ol start="0"><li>Install <a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 4.0+</li><li>Under project root <ol start="0"><li><code>npm install</code>, install project </li><li><code>./start</code></li></ol></li><li>Install <a href="https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppStoreDistributionTutorial/Setup/Setup.html" target="_blank" rel="noopener">iOS Environment</a></li><li>Install <a href="https://guides.cocoapods.org/using/getting-started.html" target="_blank" rel="noopener">CocoaPods</a></li></ol></li><li>Run playground<ol start="0"><li><code>cd ios/playground</code></li><li><code>pod install</code></li><li>Open <code>WeexDemo.xcworkspace</code> in Xcode</li><li>Click <img src="http://img1.tbcdn.cn/L1/461/1/5470b677a2f2eaaecf412cc55eeae062dbc275f9" height="16"> (<code>Run</code> button) or use default shortcut <code>cmd + r</code> in Xcode</li><li>If you want to run the demo on your device. In <code>DemoDefine.h</code>(you can search this file by Xcode default shortcut <code>cmd + shift + o</code>), modify <code>CURRENT_IP</code> to your local IP</li></ol></li></ol><p>运行的结果，如下图：             </p><p><img src="/images/94C9F54632F28B576381F1816C1C57ED.png" alt=""></p><p>但是，我们也希望在浏览器中看到效果，那么输入如下网站也可：     </p><pre><code>http://127.0.0.1:12580        </code></pre><h2 id="4-修改example"><a href="#4-修改example" class="headerlink" title="4.修改example"></a>4.修改example</h2><p><img src="/images/2921B70E8426AEF20538254492591280.png" alt=""></p><p>其中index.we是入口文件。因此可以在example中增加一个文件。然后在index.we中增加一个name和title。          </p><p><img src="/images/F7EFC1DCBD17406E556FF19833D07D98.png" alt=""></p><p>刷新即可查看效果。      </p><h2 id="5-如何学习"><a href="#5-如何学习" class="headerlink" title="5.如何学习"></a>5.如何学习</h2><p>到这里就可以调试单独的文件了，查看各种效果以及测试语法，开发过程中的问题还是建议阅读源码</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;了解Weex源码结构，修改example&quot;&gt;&lt;a href=&quot;#了解Weex源码结构，修改example&quot; class=&quot;headerlink&quot; title=&quot;了解Weex源码结构，修改example&quot;&gt;&lt;/a&gt;了解Weex源码结构，修改example&lt;/h2&gt;&lt;p&gt;其实，写一个简单的带有样式的界面还是挺简单的。接下来就是要学习官方给的example示例，看一下官方的目录结构以及示例代码，开发过程中遇到的不明白的问题其实很多都能在官方demo里找到答案。         &lt;/p&gt;
&lt;h2 id=&quot;1-下载Weex源码&quot;&gt;&lt;a href=&quot;#1-下载Weex源码&quot; class=&quot;headerlink&quot; title=&quot;1. 下载Weex源码&quot;&gt;&lt;/a&gt;1. 下载Weex源码&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/weex&quot;&gt;weexGithub&lt;/a&gt;&lt;br&gt;这里可以用 &lt;strong&gt;git clone&lt;/strong&gt; 或者直接download&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/alibaba/weex.git    
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;2-了解源码结构&quot;&gt;&lt;a href=&quot;#2-了解源码结构&quot; class=&quot;headerlink&quot; title=&quot;2.了解源码结构&quot;&gt;&lt;/a&gt;2.了解源码结构&lt;/h2&gt;&lt;p&gt;代码下载完成了，先看一下源码的目录结构。  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/EAFF24F8C94E94BDA4EF1111E6B93CA1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="WEEX" scheme="https://github.com/gokoo/gokoo.github.io.git/categories/WEEX/"/>
    
    
      <category term="WEEX" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/WEEX/"/>
    
      <category term="web" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/web/"/>
    
      <category term="跨平台" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>HellowWeex</title>
    <link href="https://github.com/gokoo/gokoo.github.io.git/2016/09/13/1.HellowWeex/"/>
    <id>https://github.com/gokoo/gokoo.github.io.git/2016/09/13/1.HellowWeex/</id>
    <published>2016-09-13T05:46:25.000Z</published>
    <updated>2020-03-17T13:16:05.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Weex是什么？"><a href="#Weex是什么？" class="headerlink" title="Weex是什么？"></a>Weex是什么？</h2><p>Weex是阿里开源的一套构建跨平台的移动框架。对于前端，最直观的是web components的开发方式；对于Native同学，可以理解为使用web的开发方式构建跨平台移动程序（iOS &amp; Android）。可以类比的是React Native，但是相对React Native更为彻底：不仅统一了 iOS/Android的差异，更是实现了三端的统一。2016年，weex值得去关注，因为目前移动端的痛点是需要被攻克的难题。而这一块也是大家孜孜不倦的努力探索的结果。<br>Weex更多细节参考： <a href="http://alibaba.github.io/weex/index.html。" target="_blank" rel="noopener">http://alibaba.github.io/weex/index.html。</a>    </p><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2><p>现在的开发方式，不像以前直接1个html文件就可以的。任何工程化的体系都有相配套的工具。</p><h3 id="第0步：安装Node-js"><a href="#第0步：安装Node-js" class="headerlink" title="第0步：安装Node.js"></a>第0步：安装Node.js</h3><p>如何安装，这里不赘述了，可以直接到Node.js官网下载安装。安装Node.js的同时会帮助我们安装好npm。 初步安装的同学可以使用:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v6.3.1</span><br><span class="line">$ npm -v</span><br><span class="line">3.10.3</span><br><span class="line">```</span><br><span class="line">node -v 和 npm -v 命令来测试Node.js环境是否搭建成功。</span><br><span class="line"><span class="comment">### 第1步：安装weex-toolkit      </span></span><br><span class="line">这里使用npm来完成。因为npm之前已经安装好了。所以，直接拿来使用即可。      </span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">$ npm install -g weex-toolkit    </span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">如果发现很慢，说明是时候考虑使用cnpm来安装了。首先，我们全局安装cnpm：     </span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">$ npm install -g cnpm</span><br></pre></td></tr></table></figure><p>cnpm是一个国内npm镜像，可以提高下载速度。我们使用cnpm：     </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install -g weex-toolkit      </span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">**备注：** 若提示权限问题，加上``sudo``关键字即可(管理员权限，和Win下右键以管理员身份运行一样)。例如：  </span><br><span class="line"> </span><br><span class="line">```bash </span><br><span class="line">$ sudo npm install -g weex-toolkit</span><br></pre></td></tr></table></figure><p> 然后输入你本机电脑密码即可。       </p><p> weex-toolkit安装完成后，输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ weex --version    </span><br><span class="line">info 0.4.4</span><br></pre></td></tr></table></figure><p>说明，我们安装成功。               </p><a id="more"></a><h3 id="第2步：创建文件"><a href="#第2步：创建文件" class="headerlink" title="第2步：创建文件"></a>第2步：创建文件</h3><p>weex程序的文件后缀（扩展名）是.we。因此我们创建一个.we的文件。Linux下可以使用touch命令创建文件。      </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch hello.we</span><br></pre></td></tr></table></figure><p>我们打开空白的hello.we文件，输入三个标签，内容为：       </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>      </span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">其实，这个时候，我们的程序完成了，就是这么简单粗暴。开发完成了，这段代码是不能直接跑的。我们都知道.html是可以直接运行的，这个程序呢，缺少了html的载体，同时只是xml的子集。那么，我们就需要使用weex-toolkit来编译我们的代码了。这里，使用weex命令编译hello.we文件。              </span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">$ weex hello.we       </span><br><span class="line">```</span><br><span class="line"> </span><br><span class="line">这时，会发现浏览器被打开了，浏览器地址是：        </span><br><span class="line"></span><br><span class="line">``http://127.0.0.1:8081/weex_tmp/h5_render/?hot-reload_controller&amp;page=hello.js&amp;loader=xhr``          </span><br><span class="line"></span><br><span class="line">这是浏览器是空白的，因为我们没有添加任何实质的内容。          </span><br><span class="line"></span><br><span class="line">### 第3步：添加内容     </span><br><span class="line">我们修改weex.we文件，像 hello.we 的 template 添加内容。 weex.we文件内容如下：        </span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>       </span><br><span class="line">```</span><br><span class="line"> </span><br><span class="line">我们再次编译hello.we文件：    </span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">$ weex hello.we       </span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">OK，我们会看到浏览器显示了：Hello world字样。        </span><br><span class="line"></span><br><span class="line">### 第5步：增加样式       </span><br><span class="line"> 我们给text增加样式，具体代码如下：           </span><br><span class="line"></span><br><span class="line">```html </span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"color:red;"</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.text&#123;</span></span><br><span class="line"><span class="undefined">font-size:160;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>weex-toolkit <strong> 会帮我们重载页面 </strong>（前提是在文档修改完成的时候保存一下就可以了）。浏览器可以看到“Hello world”字样。</p><p><img src="/images/11FF2901D1F2ED241F58B2E646DBBB32.png" alt=""></p><p>weex中支持<code>style</code>和<code>class</code>来设定样式。但是font-size：160后面没有px。因此，css需要统一web和Native。weex做了兼容和取舍，目前支持的样式如下： <a href="http://alibaba.github.io/weex/doc/references/common-style.html" target="_blank" rel="noopener">http://alibaba.github.io/weex/doc/references/common-style.html</a>     </p><h3 id="第6步：-html文件载体在哪"><a href="#第6步：-html文件载体在哪" class="headerlink" title="第6步：.html文件载体在哪"></a>第6步：.html文件载体在哪</h3><p>我们既然运行了程序，那么一定有一个.html作为程序入口。其实，weex-toolkit给我们生成了相关文件。我们可以到hello.we同级目录下查找，就会发现有一个weex_tmp文件。该文件夹就是生成的可以执行的浏览器代码。       </p><p><img src="/images/DF849B4CB38DDF064FE6B85E827F45A6.png" alt=""></p><h3 id="第7步：实践"><a href="#第7步：实践" class="headerlink" title="第7步：实践"></a>第7步：实践</h3><p>和web不同的是div<strong>不可以</strong>直接在里面写字，因为text组件是用来渲染文本的。在weex或者react native中，类似的这些标签不再是html元素了，而是组件。组件的意思是，每个组件承载各自的功能，区分明显；不像web那样自由。 </p><p>其它组件有哪些？哪些组件可以使用？<br>参考： <a href="http://alibaba.github.io/weex/doc/" target="_blank" rel="noopener">http://alibaba.github.io/weex/doc/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Weex是什么？&quot;&gt;&lt;a href=&quot;#Weex是什么？&quot; class=&quot;headerlink&quot; title=&quot;Weex是什么？&quot;&gt;&lt;/a&gt;Weex是什么？&lt;/h2&gt;&lt;p&gt;Weex是阿里开源的一套构建跨平台的移动框架。对于前端，最直观的是web components的开发方式；对于Native同学，可以理解为使用web的开发方式构建跨平台移动程序（iOS &amp;amp; Android）。可以类比的是React Native，但是相对React Native更为彻底：不仅统一了 iOS/Android的差异，更是实现了三端的统一。2016年，weex值得去关注，因为目前移动端的痛点是需要被攻克的难题。而这一块也是大家孜孜不倦的努力探索的结果。&lt;br&gt;Weex更多细节参考： &lt;a href=&quot;http://alibaba.github.io/weex/index.html。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://alibaba.github.io/weex/index.html。&lt;/a&gt;    &lt;/p&gt;
&lt;h2 id=&quot;Hello-world&quot;&gt;&lt;a href=&quot;#Hello-world&quot; class=&quot;headerlink&quot; title=&quot;Hello world&quot;&gt;&lt;/a&gt;Hello world&lt;/h2&gt;&lt;p&gt;现在的开发方式，不像以前直接1个html文件就可以的。任何工程化的体系都有相配套的工具。&lt;/p&gt;
&lt;h3 id=&quot;第0步：安装Node-js&quot;&gt;&lt;a href=&quot;#第0步：安装Node-js&quot; class=&quot;headerlink&quot; title=&quot;第0步：安装Node.js&quot;&gt;&lt;/a&gt;第0步：安装Node.js&lt;/h3&gt;&lt;p&gt;如何安装，这里不赘述了，可以直接到Node.js官网下载安装。安装Node.js的同时会帮助我们安装好npm。 初步安装的同学可以使用:  &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ node -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v6.3.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.10.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node -v 和 npm -v 命令来测试Node.js环境是否搭建成功。	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;### 第1步：安装weex-toolkit      &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这里使用npm来完成。因为npm之前已经安装好了。所以，直接拿来使用即可。      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g weex-toolkit    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果发现很慢，说明是时候考虑使用cnpm来安装了。首先，我们全局安装cnpm：     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g cnpm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;cnpm是一个国内npm镜像，可以提高下载速度。我们使用cnpm：     &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cnpm install -g weex-toolkit      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;**备注：** 若提示权限问题，加上``sudo``关键字即可(管理员权限，和Win下右键以管理员身份运行一样)。例如：  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```bash &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo npm install -g weex-toolkit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 然后输入你本机电脑密码即可。       &lt;/p&gt;
&lt;p&gt; weex-toolkit安装完成后，输入:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ weex --version    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;info 0.4.4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;说明，我们安装成功。               &lt;/p&gt;
    
    </summary>
    
      <category term="WEEX" scheme="https://github.com/gokoo/gokoo.github.io.git/categories/WEEX/"/>
    
    
      <category term="WEEX" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/WEEX/"/>
    
      <category term="web" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/web/"/>
    
      <category term="跨平台" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>前言</title>
    <link href="https://github.com/gokoo/gokoo.github.io.git/2016/09/13/0.%E5%BC%95/"/>
    <id>https://github.com/gokoo/gokoo.github.io.git/2016/09/13/0.引/</id>
    <published>2016-09-13T04:46:25.000Z</published>
    <updated>2020-03-17T13:16:05.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Weex"><a href="#Weex" class="headerlink" title="Weex"></a>Weex</h2><p>无疑，Weex成为了最火的移动技术<strong>之一</strong>，但是，因为开源时间相对较短，铺建的基础设施较大。业界目前还没有特别丰富的Demo、实践的案例、工程化的方案供大家参考。<br>本文适合有一定的web开发经验的开发者，能看懂HTML+CSS以及少量的js，可以稍微看一下附录9，会有所帮助。</p><h2 id="WEEX"><a href="#WEEX" class="headerlink" title="WEEX"></a>WEEX</h2><h3 id="WEEX快速入门"><a href="#WEEX快速入门" class="headerlink" title="WEEX快速入门"></a>WEEX快速入门</h3><ol><li>HellowWeex    </li><li>了解Weex源码结构，修改example</li><li>初始化工程干了一件什么事儿            </li><li>了解工程  </li><li>ide的配置和选择</li><li>模版、样式、JavaScript</li><li>weex自带组件的使用</li><li>01.Weex组件分离<br> 02.weex组件通讯</li><li>if repeat 的使用</li><li>界面跳转与传值<a id="more"></a></li></ol><h3 id="应用参考"><a href="#应用参考" class="headerlink" title="应用参考"></a>应用参考</h3><ol><li><a href="https://github.com/vczero/weex-yy">微阅读应用</a>         </li><li><a href="https://github.com/dodola/WeexOne">One</a></li><li><a href="https://github.com/charlescui/weex-baji">baji电台</a></li><li>班豆(weex上线项目)</li></ol><h3 id="F-amp-Q"><a href="#F-amp-Q" class="headerlink" title="F&amp;Q"></a>F&amp;Q</h3><ol><li><a href="http://weex.help" target="_blank" rel="noopener">Weex中文社区</a>    </li><li><a href="https://gitter.im/weexteam/cn?utm_source=share-link&amp;utm_medium=link&amp;utm_campaign=share-link" target="_blank" rel="noopener">Weex中文聊天室</a>            </li><li>Weex交流QQ群：572735902</li><li><a href="https://github.com/alibaba/weex/issues">关于问题解决大多数都可以在weex的issue里面找到</a></li><li>关于新建项目tabbar组件不显示的问题 在template中使用到了一些控件很多人启动的时候发现会发报错这是因为其实这些控件是 weex-components 模块中的一个组件，使用前需要引用 weex-components模块<br>require(“weex-components”);<br>项目中引入，可以在项目根目录中执行以下命令：<br>npm install weex-components –save</li></ol><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ol><li><a href="http://awhisper.github.io/2016/07/22/Weex-ReactNative-JSPatch/" target="_blank" rel="noopener">Weex &amp; ReactNative &amp; JSPatch</a>    </li><li><a href="https://zhuanlan.zhihu.com/p/21677103" target="_blank" rel="noopener">Weex和RN对比</a>            </li><li><a href="https://open.taobao.com/doc2/detail?spm=a219a.7629140.0.0.tFddsV&amp;&amp;docType=1&amp;articleId=104829" target="_blank" rel="noopener">weex iOS 集成指南</a></li><li><a href="http://vodcdn.video.taobao.com/oss/taobao-ugc/5ce842e3461d4d3bbcb58e57ae4387c5/1473820504/video.mp4" target="_blank" rel="noopener">weexDevTools 视频教程</a></li><li><a href="https://segmentfault.com/a/1190000004363303" target="_blank" rel="noopener">Weex——关于移动端动态性的思考、实现和未来</a></li><li><a href="https://segmentfault.com/a/1190000005060563" target="_blank" rel="noopener">深度揭秘阿里移动端高性能动态化方案Weex</a></li><li><a href="http://www.w3school.com.cn" target="_blank" rel="noopener">w3cSchool</a></li><li><a href="http://www.helloxcx.com" target="_blank" rel="noopener">微信小程序</a></li><li><a href="https://getfullstack.com" target="_blank" rel="noopener">web全栈技术指南</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA4MjA0MTc4NQ==&amp;mid=2651573630&amp;idx=1&amp;sn=d536872e9aeabf3581b02e648b588a51&amp;scene=1&amp;srcid=0908HEvDLOd4adByh6u5ju15#rd" target="_blank" rel="noopener">weex快速上手教程</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Weex&quot;&gt;&lt;a href=&quot;#Weex&quot; class=&quot;headerlink&quot; title=&quot;Weex&quot;&gt;&lt;/a&gt;Weex&lt;/h2&gt;&lt;p&gt;无疑，Weex成为了最火的移动技术&lt;strong&gt;之一&lt;/strong&gt;，但是，因为开源时间相对较短，铺建的基础设施较大。业界目前还没有特别丰富的Demo、实践的案例、工程化的方案供大家参考。&lt;br&gt;本文适合有一定的web开发经验的开发者，能看懂HTML+CSS以及少量的js，可以稍微看一下附录9，会有所帮助。&lt;/p&gt;
&lt;h2 id=&quot;WEEX&quot;&gt;&lt;a href=&quot;#WEEX&quot; class=&quot;headerlink&quot; title=&quot;WEEX&quot;&gt;&lt;/a&gt;WEEX&lt;/h2&gt;&lt;h3 id=&quot;WEEX快速入门&quot;&gt;&lt;a href=&quot;#WEEX快速入门&quot; class=&quot;headerlink&quot; title=&quot;WEEX快速入门&quot;&gt;&lt;/a&gt;WEEX快速入门&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;HellowWeex    &lt;/li&gt;
&lt;li&gt;了解Weex源码结构，修改example&lt;/li&gt;
&lt;li&gt;初始化工程干了一件什么事儿            &lt;/li&gt;
&lt;li&gt;了解工程  &lt;/li&gt;
&lt;li&gt;ide的配置和选择&lt;/li&gt;
&lt;li&gt;模版、样式、JavaScript&lt;/li&gt;
&lt;li&gt;weex自带组件的使用&lt;/li&gt;
&lt;li&gt;01.Weex组件分离&lt;br&gt; 02.weex组件通讯&lt;/li&gt;
&lt;li&gt;if repeat 的使用&lt;/li&gt;
&lt;li&gt;界面跳转与传值
    
    </summary>
    
      <category term="WEEX" scheme="https://github.com/gokoo/gokoo.github.io.git/categories/WEEX/"/>
    
    
      <category term="WEEX" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/WEEX/"/>
    
      <category term="web" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/web/"/>
    
      <category term="跨平台" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>CoreSpotlight 学习</title>
    <link href="https://github.com/gokoo/gokoo.github.io.git/2016/05/13/CoreSpotlight%C2%A0%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/gokoo/gokoo.github.io.git/2016/05/13/CoreSpotlight 学习/</id>
    <published>2016-05-13T11:46:25.000Z</published>
    <updated>2020-03-19T03:30:21.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>&lt;CoreSpotlight&gt;是 <strong>iOS9 / Xcode7</strong> 提供的一组新的API来帮助你建立起你的应用中的索引。CoreSpotlight是用来处理用户数据<br>要使用CoreSpotlight首先要在工程-&gt;Build Phases-&gt;Link Binary With Libraries-&gt;搜索CoreSpotlight引入Framework</p><h1 id="搜索结果的初始化以及添加"><a href="#搜索结果的初始化以及添加" class="headerlink" title="搜索结果的初始化以及添加"></a>搜索结果的初始化以及添加</h1><blockquote><p><strong>CSSearchableItemAttributeSet</strong> ：声明CSSearchableItem包含的元数据。</p></blockquote><h4 id="CSSearchableItemAttributeSet-方法-点击此处查看效果"><a href="#CSSearchableItemAttributeSet-方法-点击此处查看效果" class="headerlink" title="CSSearchableItemAttributeSet 方法 点击此处查看效果"></a>CSSearchableItemAttributeSet 方法 <a href="http://e.hiphotos.baidu.com/image/pic/item/42166d224f4a20a42adfcc5c99529822730ed06c.jpg" target="_blank" rel="noopener">点击此处查看效果</a></h4><a id="more"></a><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*应用内搜索object，想搜索到多少种界面就要创建多少个set ，每个set都要对应一个item*/</span></span><br><span class="line">    CSSearchableItemAttributeSet *firstSet = [[CSSearchableItemAttributeSet alloc] initWithItemContentType:<span class="string">@"firstSet"</span>];</span><br><span class="line"><span class="comment">//标题</span></span><br><span class="line">    firstSet.title = <span class="string">@"搜索结果1"</span>;</span><br><span class="line"><span class="comment">//详细描述</span></span><br><span class="line">    firstSet.contentDescription = <span class="string">@"这是spotlight第一条搜索结果"</span>;</span><br><span class="line"><span class="comment">//关键字，搜索索引  经测试长的字符串spotlight可以自动模糊搜索，所以关键词</span></span><br><span class="line">    <span class="built_in">NSArray</span> *firstSeachKey = @[<span class="string">@"CoreSpotlight"</span>,<span class="string">@"结果"</span>,<span class="string">@"测试"</span>,<span class="string">@"搜索"</span>];</span><br><span class="line">    firstSet.contactKeywords = firstSeachKey;</span><br><span class="line"><span class="comment">//缩略图</span></span><br><span class="line">    firstSet.thumbnailData = [<span class="built_in">NSData</span> dataWithContentsOfURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://static0.tuicool.com/profile/05fcaf20abfa_1479439428.jpg"</span>]];</span><br></pre></td></tr></table></figure><blockquote><p><strong>CSSearchableItem</strong> 是CSSearchableItemAttributeSet的内容</p></blockquote><h4 id="CSSearchableItem-方法"><a href="#CSSearchableItem-方法" class="headerlink" title="CSSearchableItem 方法"></a>CSSearchableItem 方法</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UniqueIdentifier每个搜索都有一个唯一标示，当用户点击搜索到得某个内容的时候，系统会调用代理方法，会将这个唯一标示传给你，以便让你确定是点击了哪一个，方便做页面跳转</span></span><br><span class="line"><span class="comment">//domainIdentifier搜索域标识，删除条目的时候调用的delegate会传过来这个值</span></span><br><span class="line">    CSSearchableItem *firstItem = [[CSSearchableItem alloc] initWithUniqueIdentifier:<span class="string">@"thirdItem"</span> domainIdentifier:<span class="string">@"third"</span> attributeSet:firstSet];</span><br></pre></td></tr></table></figure><blockquote><p>CSSearchableIndex 将初始好的items加入到搜索数据源里</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[[CSSearchableIndex defaultSearchableIndex] indexSearchableItems:@[firstItem] completionHandler:^(<span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"设置失败%@"</span>,error);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"设置成功"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure><h1 id="用户点击搜索结果的交互"><a href="#用户点击搜索结果的交互" class="headerlink" title="用户点击搜索结果的交互"></a>用户点击搜索结果的交互</h1><blockquote><p>类似remote消息，在”AppDelegate.m”里面实现以下方法</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application continueUserActivity:(<span class="built_in">NSUserActivity</span> *)userActivity restorationHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSArray</span> * _Nullable))restorationHandler&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *dentifier  = userActivity.userInfo[<span class="string">@"kCSSearchableItemActivityIdentifier"</span>];</span><br><span class="line">    <span class="comment">//这里做一个封装好的来处理交互消息</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="索引的删除"><a href="#索引的删除" class="headerlink" title="索引的删除"></a>索引的删除</h1><blockquote><p>CSSearchableIndex 提供了三种方法来删除索引</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[CSSearchableIndex defaultSearchableIndex]<span class="comment">//系统SearchableIndex的单例</span></span><br><span class="line">- (<span class="keyword">void</span>)deleteSearchableItemsWithIdentifiers:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)identifiers completionHandler:(<span class="keyword">void</span> (^ __<span class="keyword">nullable</span>)(<span class="built_in">NSError</span> * __<span class="keyword">nullable</span> error))completionHandler; </span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)deleteSearchableItemsWithDomainIdentifiers:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)domainIdentifiers completionHandler:(<span class="keyword">void</span> (^ __<span class="keyword">nullable</span>)(<span class="built_in">NSError</span> * __<span class="keyword">nullable</span> error))completionHandler;</span><br><span class="line"></span><br><span class="line"> - (<span class="keyword">void</span>)deleteAllSearchableItemsWithCompletionHandler:(<span class="keyword">void</span> (^ __<span class="keyword">nullable</span>)(<span class="built_in">NSError</span> * __<span class="keyword">nullable</span> error))completionHandler;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>关于CSSearchableItemAttributeSet</p></blockquote><ol><li>contactKeywords的搜索索引，经过测试，<strong>一段长文字spotlight可以自动模糊匹配</strong>，比如将key设为“这是spotlight第一条搜索结果”输入“这是”、“zhes”、“第一条”···都会匹配搜索结果，key的长度没有进行验证</li><li>经测试缩略图的添加可以采用URL的方式，不用唤醒app，应该是系统自动根据URL读取其中的data</li><li>通过查看CSSearchableItemAttributeSet的头文件推测搜索结果支持国际化语言</li></ol><blockquote><p>关于UniqueIdentifier和domainIdentifier的设定</p></blockquote><ol><li>可以通过统一的前缀来设置关联，用于区分跳转以及删除和关闭某些敏感信息的搜索结果</li><li>通过UniqueIdentifier携带的信息来区分类别以及执行跳转至后的动作</li></ol><blockquote><p>关于搜索结果的插入</p></blockquote><ol><li>通过把玩新浪微博以及即刻脉脉之后发现，搜索的结果应该是之前打开app加载好的数据，相当于做了一个缓存，而之前没有加载的数据是不会搜索到的，所以猜测这个搜索是不能唤起app内部执行网络请求的。比如我之前微博没有关注“谢娜”，在spotlight搜索“谢娜”没有搜索结果，当我在微博里点进去谢娜的主页之后再出来搜索结果就出现了。</li><li>插入逻辑可以在数据请求成功后对不同的Model异步进行thumbData、title、description的处理</li></ol><blockquote><p>关于搜索结果的删除和关闭app在spotlight的显示</p></blockquote><ol><li>初步设想首先根据UniqueIdentifier和domainIdentifier对搜索结果进行分类，删除的时候调用CSSearchableIndex的方法统一删除，并且在插入搜索结果的工具类里进行Model屏蔽</li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.cnblogs.com/CocoonJin/p/4703366.html" target="_blank" rel="noopener">iOS 9之应用内搜索(CoreSpotlight）API - CocoonJin的博客</a><br><a href="http://www.cnblogs.com/KingQiangzi/p/4861851.html" target="_blank" rel="noopener">iOS 9 应用内搜索(CoreSpotlight）的使用 - 魅风追影</a><br><a href="https://developer.apple.com/reference/corespotlight" target="_blank" rel="noopener">Apple Core Spotlight 文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&amp;lt;CoreSpotlight&amp;gt;是 &lt;strong&gt;iOS9 / Xcode7&lt;/strong&gt; 提供的一组新的API来帮助你建立起你的应用中的索引。CoreSpotlight是用来处理用户数据&lt;br&gt;要使用CoreSpotlight首先要在工程-&amp;gt;Build Phases-&amp;gt;Link Binary With Libraries-&amp;gt;搜索CoreSpotlight引入Framework&lt;/p&gt;
&lt;h1 id=&quot;搜索结果的初始化以及添加&quot;&gt;&lt;a href=&quot;#搜索结果的初始化以及添加&quot; class=&quot;headerlink&quot; title=&quot;搜索结果的初始化以及添加&quot;&gt;&lt;/a&gt;搜索结果的初始化以及添加&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CSSearchableItemAttributeSet&lt;/strong&gt; ：声明CSSearchableItem包含的元数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;CSSearchableItemAttributeSet-方法-点击此处查看效果&quot;&gt;&lt;a href=&quot;#CSSearchableItemAttributeSet-方法-点击此处查看效果&quot; class=&quot;headerlink&quot; title=&quot;CSSearchableItemAttributeSet 方法 点击此处查看效果&quot;&gt;&lt;/a&gt;CSSearchableItemAttributeSet 方法 &lt;a href=&quot;http://e.hiphotos.baidu.com/image/pic/item/42166d224f4a20a42adfcc5c99529822730ed06c.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击此处查看效果&lt;/a&gt;&lt;/h4&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/gokoo/gokoo.github.io.git/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/iOS/"/>
    
      <category term="CoreSpotlight" scheme="https://github.com/gokoo/gokoo.github.io.git/tags/CoreSpotlight/"/>
    
  </entry>
  
</feed>
